{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/spencerjtwyman/Goose-Chaser/blob/main/Image%20Classification%20Model%20Training%20Final\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%pip install serpapi\n",
        "%pip install google-search-results\n",
        "from serpapi import GoogleSearch"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "67YsH_Wz4JeF",
        "outputId": "799057aa-ce36-4de2-ee8e-25cd01d4dc15"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: serpapi in /usr/local/lib/python3.10/dist-packages (0.1.5)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from serpapi) (2.31.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->serpapi) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->serpapi) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->serpapi) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->serpapi) (2024.2.2)\n",
            "Requirement already satisfied: google-search-results in /usr/local/lib/python3.10/dist-packages (2.4.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from google-search-results) (2.31.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->google-search-results) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->google-search-results) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->google-search-results) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->google-search-results) (2024.2.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "img = []\n",
        "random = []\n",
        "tree = []\n",
        "fgeese = []\n",
        "sgeese = []\n",
        "pgeese = []\n",
        "bench = []\n",
        "person = []\n",
        "child = []\n",
        "ball = []\n",
        "people = []\n",
        "dog = []\n",
        "dogs = []\n",
        "g1 = []\n",
        "g2 = []\n",
        "g3 = []\n",
        "g4 = []\n",
        "g5 = []\n",
        "g6 = []\n",
        "\n",
        "n7 = []\n",
        "n8 = []\n",
        "n9 = []\n",
        "n10 = []\n",
        "n11 = []\n",
        "n12 = []\n",
        "n13 = []\n",
        "n14 = []\n",
        "n15 = []\n",
        "n16 = []\n",
        "n17 = []\n",
        "n18 = []\n",
        "n19 = []\n",
        "n20 = []\n",
        "n21 = []\n",
        "n22 = []\n",
        "n23 = []\n",
        "n24 = []\n",
        "n25 = []\n",
        "n26 = []\n",
        "n27 = []\n",
        "n28 = []\n",
        "n29 = []\n",
        "# n30 = []\n",
        "# n31 = []\n",
        "# n32 = []\n",
        "# n33 = []\n",
        "# n34 = []\n",
        "# n35 = []\n",
        "# n36 = []\n",
        "# n37 = []\n",
        "# n38 = []\n",
        "# n39 = []\n",
        "#n40 = []\n",
        "#n41 = []\n",
        "#n42 = []\n",
        "#n43 = []\n",
        "#n44 = []\n",
        "#n45 = []\n",
        "#n46 = []\n",
        "#n47 = []\n",
        "#n48 = []\n",
        "#n49 = []\n",
        "\n",
        "#TODO: more arrays of items"
      ],
      "metadata": {
        "id": "XI_AS_TU6yWc"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"pigeon\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n49.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "wpzMFd7TP3Nr"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"backpack\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n48.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "DBPTXEGSPwOH"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"flamingo\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n47.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "OPGvehG1Prdy"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"headphones\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n46.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "SZNL2DoGPYmA"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"car\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n45.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "IEL-XaRxPUb3"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"sidewalk\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n44.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "HBtBPlkGPMtf"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"butterfly\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n43.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "eYcfQkuQPCMf"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"soccer ball\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n42.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "fTncWv_PO-tx"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"football\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n41.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "B-yiXzryOzjY"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"sunglasses\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n40.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "U0LEPcfCOt9F"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"ducks\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n39.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "6lk1dFrFOowP"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"duck\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n38.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "8rxteHIaOkfo"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"blue jay\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n37.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "pdWRHoycOgjO"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"robbin\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n36.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "fyQiuY0dOQ_j"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"swan\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n35.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "Hc1E6FujN6fN"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"owl\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n34.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "Q3xTEihZNz8O"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"mice\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n33.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "9xJIwQ7yNuup"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"otter\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n32.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "EK0z4ygeNrDx"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"runners\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n31.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "g8DzbkH-Nma2"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# params = {\n",
        "#   \"engine\": \"google_images\",\n",
        "#   \"google_domain\": \"google.com\",\n",
        "#   \"q\": \"bikers\",\n",
        "#   \"hl\": \"en\",\n",
        "#   \"gl\": \"us\",\n",
        "#   \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "# }\n",
        "\n",
        "# search = GoogleSearch(params)\n",
        "# results = search.get_dict()\n",
        "# for i in results[\"images_results\"][:100]:\n",
        "#   print(i[\"original\"])\n",
        "\n",
        "#   if (i[\"original\"][-3:] == \"jpg\"):\n",
        "#     n30.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "BPRc1s8RNhqY"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"bugs\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n29.append(i[\"original\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kJrC6wSPNeEb",
        "outputId": "7a4e1296-6aa8-4a6a-9498-97fb656af3e3"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "https://www.pestworldforkids.org/media/shcfugug/2022_720x480headers_howmany.jpg?preset=fullWidth360\n",
            "https://hips.hearstapps.com/hmg-prod/images/brown-marmorated-stink-bug-insect-animal-royalty-free-image-1579190795.jpg?crop=0.616xw:0.794xh;0.0238xw,0.0263xh&resize=980:*\n",
            "https://www.phipps.conservatory.org/assets/images/as_art_image/bugexplorers.png\n",
            "https://hips.hearstapps.com/hmg-prod/images/house-bugs-1620940083.png\n",
            "https://m.media-amazon.com/images/I/6139awY3UmL._AC_.jpg\n",
            "https://cdn.britannica.com/31/51831-050-F542EBA7/Diversity-heteropterans-lace-bug-coreid-termite-bat.jpg\n",
            "https://miro.medium.com/v2/resize:fit:2000/1*4X5JFuP0Kn5ypjkChjYGDg.jpeg\n",
            "https://www.treehugger.com/thmb/8he5rIw5n2ukJ44XXOHK7L-6PIc=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/__opt__aboutcom__coeus__resources__content_migration__mnn__images__2017__05__lady-bug-on-leaf-e3cd36cdc3024129b61926ddf6ef386e.jpg\n",
            "https://youmatter.world/app/uploads/2020/01/big-bug-revolution-market.jpg\n",
            "https://www.thespruce.com/thmb/lz9WXkOiKTxB36qKi1YK2mKB1BY=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/GettyImages-12209889811-bfcfcccf54e443dab33dc10afdc58af6.jpg\n",
            "https://www.adamspetcare.com/-/media/Project/OneWeb/Adams/Images/Photos/Blog/Article/bedbugs.jpg\n",
            "https://www.orkincanada.ca/drive/uploads/2023/10/box-elder-bug-illustration-min.jpg\n",
            "https://seewhatgrows.org/wp-content/uploads/2016/05/Beneficial-Bugs-for-the-Garden-Praying-Mantis-1024x659.png\n",
            "https://www.lewisginter.org/wp-content/uploads/2022/06/Big-Bugs-Daddy-Long-Legs-Tom-Hennessy-scaled.jpg\n",
            "https://thepestrangers.com/wp-content/uploads/2019/01/2019-indoor-bugs-removal-the-pest-rangers-2.jpg\n",
            "https://www.pinehillsnursery.com/wp-content/uploads/2022/06/Pine-Hills-Nursery-Good-Bugs-vs-Bad-Bugs-in-the-Garden-ladybug-eating-aphids.jpg\n",
            "https://news.ucr.edu/sites/default/files/styles/news_article_featured_l/public/2019-11/48971452897_23c7718df8_o.jpg?h=5ca7da88&itok=3gsK165v\n",
            "https://i.ebayimg.com/images/g/LaYAAOSwIjNXJSiT/s-l400.jpg\n",
            "https://images.finegardening.com/app/uploads/2021/10/22131528/%C2%A9-South12th-Dreamstime.com5089446-700x466.jpg\n",
            "https://i.natgeofe.com/n/e76f96cd-690e-4333-bf5f-d3f8d6d533df/01-giant-water-bug-minden_00545631_3x2.jpg\n",
            "https://m.media-amazon.com/images/I/71FbFDm1C3L._AC_UF1000,1000_QL80_DpWeblab_.jpg\n",
            "https://mibpestcontrol.com/wp-content/uploads/2018/11/bed_bugs_pest_control_men_in_black_chicago_bug_guy.jpg\n",
            "https://media.hswstatic.com/eyJidWNrZXQiOiJjb250ZW50Lmhzd3N0YXRpYy5jb20iLCJrZXkiOiJnaWZcLzEwLWJpZ2dlc3QtYnVncy1vbi1lYXJ0aC1waWN0dXJlczAuanBnIiwiZWRpdHMiOnsicmVzaXplIjp7IndpZHRoIjo2MjV9fX0=\n",
            "https://www.pestworld.org/media/561225/brown-marmorated-stink-side.jpg?width=4608&height=3072&v=1d9ba6b212b67a0\n",
            "https://www.boredpanda.com/blog/wp-content/uploads/2022/06/cute-bugs_wide-3-2-62986182633a4.png\n",
            "https://piedmontmastergardeners.org/wp-content/uploads/2017/08/shutterstock_683391838-scaled-637x320@2x.jpg\n",
            "https://www.cbc.ca/natureofthings/content/legacy/greatwildindoors_bugs.jpg\n",
            "https://publish.purewow.net/wp-content/uploads/sites/2/2023/12/common-house-bugs-hero.jpg?resize=720%2C780\n",
            "https://images.saymedia-content.com/.image/ar_16:9%2Cc_fill%2Ccs_srgb%2Cfl_progressive%2Cq_auto:eco%2Cw_1200/MTk3NTc4MTExNzc5MzQ5ODA1/identify-the-bugs-in-your-basement.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/house-bugs-1620940083.png?crop=0.497xw:0.994xh;0,0&resize=1200:*\n",
            "https://www.terminix.com/-/media/Feature/Terminix/Articles/tmx-ladybeetle.jpg?h=400&w=600&rev=7081b6a7ae2b407b9f4825c7fd17a631&hash=6536B8D544CCE31BBC6A88B2B2FC9E9C\n",
            "https://www.agproud.com/ext/resources/2022/09/12/55907-stokes-bugs.jpg?t=1663279700&width=1080\n",
            "https://www.catseyepest.com/wp-content/uploads/2023/09/shutterstock_2255798623.jpg\n",
            "https://modernfarmer.com/wp-content/uploads/2015/06/PrayingMantis-1200x704.jpg\n",
            "https://www.michepestcontrol.com/static/a991ba9dbe0017c9a37026ae7d500444/48d4b/a8e92b_stink_bug_on_wall_45d941144f.jpg\n",
            "https://cdn.mos.cms.futurecdn.net/JRnWXrywxXZUKiA4gJFxMe-415-80.jpg\n",
            "https://gardens.si.edu/wp-content/uploads/2023/10/Palomena_prasina_MHNT_Leguevin_Blanc_clear.png\n",
            "https://www.usatoday.com/gcdn/presto/2022/06/10/USAT/776a90f5-f54c-45e7-89f6-b1e335da1efa-Hero-stinkbug_hero.PNG?crop=2987,1680,x0,y0&width=2987&height=1680&format=pjpg&auto=webp\n",
            "https://twohandspaperie.com/cdn/shop/products/WRAP_BUG_1200x1680.jpg?v=1653418286\n",
            "https://www.experigreen.com/wp-content/uploads/2020/05/2021-June-Bugs.png\n",
            "https://i.etsystatic.com/6853575/r/il/09fef9/3112642286/il_570xN.3112642286_hzqn.jpg\n",
            "https://storage.googleapis.com/pod_public/1300/182832.jpg\n",
            "https://www.charlotteobserver.com/latest-news/ytvttf/picture277293538/alternates/LANDSCAPE_1140/green%20June%20beetle%20fig.jpg\n",
            "https://www.aces.edu/wp-content/uploads/2018/10/iStock_000017779138_XXXLarge.jpg\n",
            "https://citybugs.tamu.edu/files/2010/12/bed-bug-feeding-Whitney-Cranshawb.jpg\n",
            "https://media.defense.gov/2023/Jun/09/2003239245/1280/1280/0/200526-D-AB123-1002B.JPG\n",
            "https://www.abc4.com/wp-content/uploads/sites/4/2023/07/AdobeStock_320354647.jpeg?w=2560&h=1440&crop=1\n",
            "https://www.terro.com/media/Articles/TERRO/10-Boxelder-Bug-Questions-Answered.jpg\n",
            "https://thumbs.dreamstime.com/b/cartoon-bugs-baby-insect-funny-happy-bug-cute-ladybug-insects-mascots-different-bugs-characters-warm-comic-snail-butterfly-166407370.jpg\n",
            "https://files.aptuitivcdn.com/pvAEMgvYPL-1619/images/staff/box-elder-bugs-in-new-jersey.jpg\n",
            "https://static.scientificamerican.com/sciam/cache/file/5DACB776-7EA7-4D94-8FD91B4F0F85B948_source.jpg?w=600\n",
            "https://www.preen.com/media/wbwddc5r/bug-lg.jpg\n",
            "https://i.natgeofe.com/n/0d393dfd-52c3-4b53-80fc-85e8940874e9/STOCKPKG_MM10139_IMG_7955.jpg\n",
            "https://i.insider.com/569e92a0dd0895cf388b4670?width=800&format=jpeg&auto=webp\n",
            "https://activepestcontrol.com/wp-content/uploads/2019/03/stink-bugs.jpg\n",
            "https://i.cbc.ca/1.3612196.1464860580!/fileImage/httpImage/june-bug.jpg\n",
            "https://www.bugs.org/malechinese%201large.jpg\n",
            "https://www.thoughtco.com/thmb/TVMhtj38pR2rZ47_DQMVt4XagZo=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/cotton-stainer-591328fb3df78c928326b3e3.jpg\n",
            "https://cdn.theatlantic.com/thumbor/CQpCaqJNaJPOWpIT3RTEek8i6Wc=/202x57:3570x2583/1200x900/media/img/mt/2014/10/Adult_Female_Bed_Bug_Cimex_lectularius_Bug_length_approximately_5_mm/original.jpg\n",
            "https://www.aerex.com/cms/thumbnails/00/540x303/images/imported/r4_btzzda_z.2401251913550.jpg\n",
            "https://my.clevelandclinic.org/-/scassets/images/org/health/articles/17847-bed-bugs\n",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Bed_bug%2C_Cimex_lectularius.jpg/800px-Bed_bug%2C_Cimex_lectularius.jpg\n",
            "https://kandcpestcontrol.com/wp-content/uploads/2023/02/Frequently-Asked-Questions-About-Stink-Bugs-in-Wisconsin-1-1.png\n",
            "https://www.gardenia.net/wp-content/uploads/2023/05/damsel-bugs-780x520.webp\n",
            "https://americanpest.net/media/z0gh5tzi/bed-bug-life-cycle.jpg\n",
            "https://www.pctonline.com/remote/aHR0cHM6Ly9naWVjZG4uYmxvYi5jb3JlLndpbmRvd3MubmV0L2ZpbGV1cGxvYWRzL2ltYWdlLzIwMjMvMTAvMzEvaW52YWRlcnMuanBn.etANqe4h_u8.jpg?w=948&h=533&format=webp&mode=pad&anchor=middlecenter&scale=both&bgcolor=F0F1F2\n",
            "https://cdn.mos.cms.futurecdn.net/gJha7UfunoHtnKZkot7Pbb-320-80.jpg\n",
            "https://www.canr.msu.edu/contentAsset/image/d8467a62-907a-4c13-b65f-3420f2064d70/fileAsset/filter/Resize,Jpeg/resize_w/750/jpeg_q/80\n",
            "https://www.cnet.com/a/img/resize/029f068b1b0021ebd8cec403bef5299994d3d330/hub/2023/10/13/79d895de-ea5c-499b-b632-2d3ee2e41dc5/gettyimages-1430769969.jpg?auto=webp&fit=crop&height=1200&width=1200\n",
            "https://images.theconversation.com/files/401973/original/file-20210520-19-1othn30.jpg?ixlib=rb-4.1.0&rect=51%2C36%2C3399%2C2260&q=20&auto=format&w=320&fit=clip&dpr=2&usm=12&cs=strip\n",
            "http://cdn.shopify.com/s/files/1/1420/5180/files/What_Are_June_Bugs_Good_For_Depends_on_Whom_You_Ask.jpg?v=1681894368\n",
            "https://www.denverpost.com/wp-content/uploads/2021/08/IMG_2571.jpg?w=519\n",
            "https://ja-roy.com/wp-content/uploads/2020/12/boxelder-bug.jpg\n",
            "https://www.nationwidechildrens.org/-/media/nch/700childrens/2017/01/bed-bugsblog.ashx?w=706&h=470&as=1&bc=ffffff&hash=FBBB6ADD4E7926BA43E3ACD1DA0FF2ED\n",
            "https://images.jpost.com/image/upload/q_auto/c_fill,g_faces:center,h_537,w_822/526507\n",
            "https://www.pestworld.org/media/562948/assassin-bug-3.jpg?width=4096&height=3072&v=1d9ba6b2f4aab70\n",
            "https://www.freep.com/gcdn/-mm-/9574365c3702672aaeb02f6197cc29592b107785/c=438-0-2612-2898/local/-/media/DetroitFreePress/2014/10/20/dfp1020stinkbug.jpg\n",
            "https://www.saferbrand.com/media/Articles/Safer-Brand/what-are-june-bugs.jpg\n",
            "https://m.media-amazon.com/images/I/71xSsz2i12L._AC_UF1000,1000_QL80_DpWeblab_.jpg\n",
            "https://c02.purpledshub.com/uploads/sites/41/2023/10/bed-bug-closeup.jpg?w=1029&webp=1\n",
            "https://d18lev1ok5leia.cloudfront.net/chesapeakebay/images/_900xAUTO_crop_center-center_100_none/jan_19_21_1800-01.jpg\n",
            "https://www.acacamps.org/sites/default/files/styles/uncropped_1700/public/2022-08/bedbug.jpg?itok=Y2JP72td\n",
            "https://cdn.britannica.com/08/88208-050-494D79A2/Wheel-bug.jpg\n",
            "https://i.pinimg.com/originals/e8/a6/65/e8a66546cfc50ecf55470d16ab98a23a.webp\n",
            "https://www.gardentech.com/-/media/project/oneweb/gardentech/images/blog/goodbugs_badbugs_header-01.png\n",
            "https://www.arrowexterminators.com/assets/ticks_lookalikes_ooMo559.jpg\n",
            "https://www.indystar.com/gcdn/presto/2023/06/06/USAT/a86f027a-c677-40fa-9023-5c035e922ca4-bedbugs.jpg?crop=1274,717,x5,y0&width=1274&height=717&format=pjpg&auto=webp\n",
            "https://www.flapest.com/wp-content/uploads/2020/12/kissing_bug-1-1.jpg\n",
            "https://www.modernpest.com/uploads/BedbugOnSkin.png\n",
            "https://extensionentomology.tamu.edu/wp-content/uploads/2021/02/Wheel-bug1-Mike-Merchant.jpg\n",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Metallic_shield_bug444.jpg/1200px-Metallic_shield_bug444.jpg\n",
            "https://www.rainbowpestexperts.com/wp-content/uploads/2023/08/RPE-Boxelder-Bugs-on-tree-550x340.jpg\n",
            "https://www.koppert.com/content/_processed_/c/2/csm_Nezara-adult-Koppert_d07fc43cde.png\n",
            "https://hips.hearstapps.com/hmg-prod/images/kissing-bug-1531325941.jpg?crop=1.00xw:0.892xh;0,0.0755xh&resize=980:*\n",
            "https://static.scientificamerican.com/sciam/cache/file/824C8DCC-4CBF-40B1-BE63680FF6CEA2DA_source.jpg\n",
            "https://www.epa.gov/sites/default/files/2014-01/bed-bug-size-millimeters.png\n",
            "https://www.thebugman.com/public_files/bugman-s3-live/styles/large_1000x450/public/images/carpet-beetle.webp?itok=UYF1dms3\n",
            "https://www.thehealthy.com/wp-content/uploads/2017/05/001-Dangerous-Bugs-to-Watch-Out-for-This-Summer.jpg?fit=700%2C467\n",
            "https://www.bhg.com/thmb/RKXk7ekF8nIwSCXnKqVTPXOja24=/1983x0/filters:no_upscale():strip_icc()/Eliminate-Stink-bugs-8864a0bdc82840278becc147646a502b.jpg\n",
            "https://www.nativepestmanagement.com/static/a5c098a7610cd3d80bba28968945b13e/f2ff5/bed_bug_1_82414b52ab.webp\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"plants\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n28.append(i[\"original\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rYtdeijeNabo",
        "outputId": "29a7215d-5f4b-4402-ea4d-7a9e0fe5b053"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "https://m.media-amazon.com/images/I/71lhNoR+Q+L.jpg\n",
            "https://m.media-amazon.com/images/I/81wnRn8oWoL.jpg\n",
            "https://hips.hearstapps.com/vader-prod.s3.amazonaws.com/1660073901-best-indoor-plants-zz-plant-1660073875.png?crop=1.00xw:0.802xh;0,0.168xh&resize=980:*\n",
            "https://www.realsimple.com/thmb/P9g1f-xU0Zr2cq2_3dMwfXizZcM=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/impossible-to-kill-outdoor-plants-1-2000-f513b0574cb04674a1bce40b832b28dd.jpg\n",
            "https://res.cloudinary.com/patch-gardens/image/upload/c_fill,h_1000,q_auto:good,w_1000/Group_Baskets_InSitu_CROP_s5lzh5.jpg\n",
            "https://pyxis.nymag.com/v1/imgs/75d/2af/cfb9751f006e76587f251b3d8729b897e7-live-plants-amazon.2x.rsocial.w600.jpg\n",
            "https://cdn.atwilltech.com/flowerdatabase/s/snake-plant-house-plant-PL112722.425.jpg\n",
            "https://i.cbc.ca/1.4839023.1537972363!/fileImage/httpImage/image.png_gen/derivatives/16x9_780/plants-ft.png\n",
            "https://www.marthastewart.com/thmb/1r0K4i4pVGdqQDqZ_bJ36BIg0YI=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/plants-look-beautiful-when-not-blooming-coleus-lead-getty-0623-c6efce0847fc421fab5f394fe02cda51.jpg\n",
            "https://www.pennington.com/all-products/fertilizer/resources/-/media/Project/OneWeb/Pennington/Images/blog/fertilizer/8-Steps-to-Growing-a-Healthy-Indoor-Garden-Anytime/tropical-urban-garden.jpg\n",
            "https://cdn.atwilltech.com/flowerdatabase/l/lush-garden-of-green-plants-PL0109.425.jpg\n",
            "https://m.media-amazon.com/images/I/81TI5-UOx7L.jpg\n",
            "https://static.scientificamerican.com/sciam/cache/file/D1E779C2-5585-48B9-B5B8CA83481D212C_source.jpg?w=1200\n",
            "https://dam.thdstatic.com/content/production/oRteWV-9RjxLAc-tu138Ag/zTPy4JnpSKwosuNVLtppBQ/optimizedFile/PYG08-0027-RT.jpg?im=Crop,rect=(110.87360992301112,221.75960536858975,1182.5491873396065,739.2307692307693);Resize=(920,575)\n",
            "https://hips.hearstapps.com/hmg-prod/images/sansevieria-royalty-free-image-1642793822.jpg?crop=1xw:0.99987xh;center,top&resize=980:*\n",
            "http://rootbridges.com/cdn/shop/articles/What_Are_The_Basic_Needs_Of_The_Indoor_Plants_To_Survive.jpg?v=1641212409\n",
            "https://www.saferbrand.com/media/Articles/Safer-Brand/26-best-indoor-plants.jpg\n",
            "https://www.eatingwell.com/thmb/GW_QCVuExZQ9HGxjnh-Q4ckxod0=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/easy-houseplants-7c8bb68768a64a7a8e2ff2a434fe0db8.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/outdoor-hanging-plants-petunia-flowers-1655825453.jpeg\n",
            "https://www.gardendesign.com/pictures/images/675x529Max/site_3/hawaiian-pothos-epipremnum-aureum-proven-winners_17324.jpg\n",
            "https://pyxis.nymag.com/v1/imgs/2c4/f78/15eb2f5e158b68d3eefe81b3d2c6541181-Costa-Farms-Anthurium.rsquare.w600.jpg\n",
            "https://i5.walmartimages.com/seo/Altman-Plants-Live-Houseplants-12PK-Indoor-Delivery-Prime-Gardening-Gifts-Plant-Lovers-Planters-Potting-Soil-House-Indoors_6715fc34-a5ed-48a1-8601-dcf12196f203.18bb5959854e6585a8bbc1f3a26c373f.jpeg\n",
            "https://promova.com/content/types_of_plants_4730d5c1bd.png\n",
            "https://m.media-amazon.com/images/I/71CJEvdqK1L.jpg\n",
            "https://assets.wfcdn.com/im/72551637/resize-h600-w600%5Ecompr-r85/1093/109315834/Live+Plants.jpg\n",
            "https://cdn.shopify.com/s/files/1/0150/6262/products/the_sill-variant-mauve_gloss-money_tree.jpg?v=1699404852\n",
            "https://images.ctfassets.net/zma7thmmcinb/5t3XK5aD2RPFtBufctbBE3/8bd3a257d37147cb61d81075aac99dd5/how-to-grow-dahlias-pv-Nicholas.jpg\n",
            "https://learn-genetics.b-cdn.net/herbivores/defenses/images/rainforest.jpg\n",
            "https://www.gardendesign.com/pictures/images/675x529Max/site_3/beauty-star-calathea-calathea-ornata-pinstripe-calathea-proven-winners_17336.jpg\n",
            "https://m.media-amazon.com/images/I/81jkOe8Uj+L.jpg\n",
            "https://images.squarespace-cdn.com/content/v1/54fbb611e4b0d7c1e151d22a/1485123574547-Q8LCLMMHL0HI8VNS906L/Photo1+Jan+22%2C+12+54+46+PM.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/collection-of-beautiful-houseplants-on-wooden-table-royalty-free-image-1712685460.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/best-bedroom-plants-dieffenbachia-1658353035.jpeg?crop=1xw:1xh;center,top&resize=980:*\n",
            "https://imageio.forbes.com/specials-images/imageserve/621b817d4a86784da5949c9c/0x0.jpg?format=jpg&crop=2132,1599,x1,y557,safe&height=600&width=1200&fit=bounds\n",
            "https://spca.bc.ca/wp-content/uploads/toxic-plants-nerium-oleander-apocynaceae.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/house-plants-1617221366.jpg\n",
            "https://www.realsimple.com/thmb/QdluUXRs9QNLFMazeIsEzQQmTyQ=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/aglaonema-chinese-evergreen-green-b9cbce3643dc4224befe57a3846a043e.jpg\n",
            "https://www.ikea.com/us/en/images/products/tropisk-potted-plant-tropical-plant-assorted-species-plants__1156209_pe886994_s5.jpg\n",
            "https://d2csxpduxe849s.cloudfront.net/media/E32629C6-9347-4F84-81FEAEF7BFA342B3/450E9326-0272-405C-B8D614C72BED9F89/52F2110A-1CAA-43C0-BE84F352D8AB0835/WebsiteJpg_XL-FPLS_Main%20Visual_Green_Website.jpg\n",
            "https://cdn.firstcry.com/education/2022/11/29123342/Types-Of-Plants-In-English-For-Preschoolers-And-Kids.jpg\n",
            "https://www.bhg.com/thmb/w1nvm3p2qmu4Ljb9AOfmVl-UvCI=/3000x0/filters:no_upscale():strip_icc()/how-to-water-houseplants-5651236-primary-3aa1e5b5021640ee96184b6755caa964.jpg\n",
            "https://m.media-amazon.com/images/I/51tNr+RG9-L._AC_UF894,1000_QL80_.jpg\n",
            "https://hips.hearstapps.com/vader-prod.s3.amazonaws.com/1679061325-chinese-evergreens-6414713d074fc.jpg?crop=0.98xw:1xh;center,top&resize=980:*\n",
            "http://media.wired.com/photos/5d8aab8bef84070009028d31/master/pass/Plant-Music-1162975190.jpg\n",
            "https://www.rhs.org.uk/getmedia/66015948-e744-4800-8fb5-fc407af40a65/dracaena-nephrolepis-sansevieria.jpg\n",
            "https://images.wsjcommerce.net/im-557182?width=1280&size=1\n",
            "https://hips.hearstapps.com/hmg-prod/images/mint-plants-in-terracotta-pots-high-res-stock-photography-679037565-1537377715.jpg?crop=0.447xw:1.00xh;0.122xw,0&resize=980:*\n",
            "https://www.realsimple.com/thmb/nklsLD-8j3LPVG3DaMqP-VQT_Ms=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/selby-plant-047b316673564318b0498ad1c318ebc1.png\n",
            "https://assets.eflorist.com/assets/products/PHR_/TPL03-1A.jpg\n",
            "https://hips.hearstapps.com/vader-prod.s3.amazonaws.com/1679004024-411sGdWhhhL._SL500_.jpg?crop=1xw:1.00xh;center,top&resize=980:*\n",
            "https://www.theparisreview.org/blog/wp-content/uploads/2022/06/1024px-venus_flytrap_-_dionaea_muscipula_-_panoramio_7.jpg\n",
            "https://assets.vogue.com/photos/5891905e85b3959618474d76/master/w_2560%2Cc_limit/0-holding-chic-plants-jessie-kanelos-weiner.jpg\n",
            "https://news.stanford.edu/wp-content/uploads/2022/05/S_parvula.jpg\n",
            "https://media.cnn.com/api/v1/images/stellar/prod/the-sill-df-lead-image-00.jpg?c=16x9\n",
            "https://houseplantshop.com/cdn/shop/files/July21_Tropical_email_header_3_1ceace14-d3c7-49e7-a5f2-cc0bcf7ed6ab_738x738_crop_center.jpg?v=1692665038\n",
            "https://images.wsjcommerce.net/im-561940\n",
            "https://dsk4t6ov5vq8n.cloudfront.net/uploads/PBS-Articles/2022/The-Green-Planet/Episode-4-photos/Sized-photos/The_Green_Planet_04_010.jpg\n",
            "https://www.ikea.com/us/en/images/products/fejka-artificial-potted-plant-indoor-outdoor-monstera__0614197_pe686822_s5.jpg\n",
            "https://www.thespruce.com/thmb/VYJyiMeu8N0ek6SVD1FvLudGkGo=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/SPR-houseplants-grown-in-water-4177520-hero-264670857d8b4c68a66b6d63c20e179e.jpg\n",
            "https://images.thdstatic.com/productImages/bc164ee0-c372-4c0c-9cfc-6262b52d1da4/svn/united-nursery-house-plants-zz10fgtrc-64_300.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/young-zamioculcas-a-potted-plant-isolated-over-royalty-free-image-1574380612.jpg?crop=0.884xw:1.00xh;0.0663xw,0&resize=980:*\n",
            "https://media.post.rvohealth.io/wp-content/uploads/2020/09/Male_Indoor_Plants_732x549-thumbnail.jpg\n",
            "https://images.thdstatic.com/productImages/aeb01cb3-de79-41e0-b77c-a479f963d3d5/svn/united-nursery-house-plants-zz10hw-64_300.jpg\n",
            "https://hips.hearstapps.com/vader-prod.s3.amazonaws.com/1629245918-51w2is3YV4L._SL500_.jpg?crop=1xw:1.00xh;center,top&resize=980:*\n",
            "https://media.istockphoto.com/id/1372896722/photo/potted-banana-plant-isolated-on-white-background.jpg?s=612x612&w=0&k=20&c=bioeNAo7zEqALK6jvyGlxeP_Y7h6j0QjuWbwY4E_eP8=\n",
            "https://watchandlearn.scholastic.com/content/dam/classroom-magazines/watchandlearn/videos/animals-and-plants/plants/what-are-plants-/What-Are-Plants.jpg\n",
            "https://www.bhg.com/thmb/SfvVALaQxFyi4vYdbhBR11S41S8=/1280x0/filters:no_upscale():strip_icc()/indoor-potted-houseplants-703b321a-81cf8e1f9aee48a28e1be3bbc45e4386.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/indoor-plants-1634736990.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/screenshot-2023-08-17-at-12-19-58-pm-64de48b17bc83.png?crop=1xw:1xh;center,top&resize=980:*\n",
            "https://cdn.atwilltech.com/flowerdatabase/m/majestic-garden-dish-garden-PL111722.365.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/common-houseplants-to-grow-1641843117.jpeg?crop=0.668xw:1.00xh;0.104xw,0&resize=1200:*\n",
            "https://mobileimages.lowes.com/productimages/6196e5ff-672d-4851-bdd6-8e6b077e1645/61110383.jpg?size=pdhism\n",
            "https://houseplantshop.com/cdn/shop/files/June20_Tropical_banner_4de04726-d1a9-4606-915e-aa5a75d446b1_1000x1000_crop_center.jpg?v=1663811377\n",
            "https://cdn.atwilltech.com/flowerdatabase/_/285.425.jpg\n",
            "https://plants.usda.gov/images/welcome_slim.jpg\n",
            "https://extension.wvu.edu/files/3b8464ac-f6df-4768-aca2-1ff82fffb8b9/893x595?cb=ffa0c775d39d64dd197ec302bc49d336\n",
            "https://media.architecturaldigest.com/photos/641c9af144453f6645298ec9/1:1/w_4000,h_4000,c_limit/GettyImages-1379011538%20(1).jpg\n",
            "https://dam.thdstatic.com/content/production/gN7uQ-YQjyDzg3DGSVgdIg/fa4uQplIaGUu1J770D1_QQ/Original%20file/2023_2v2_Tropical_Indoor.jpg?im=Resize=(703,395.44)\n",
            "https://www.gardenia.net/wp-content/uploads/2023/05/succulents-780x520.webp\n",
            "https://images.herzindagi.info/image/2023/Oct/ornamental-plants-at-home.jpg\n",
            "https://vader-prod.s3.amazonaws.com/1684272661-71WGDbkgMLL.jpg\n",
            "https://www.thespruce.com/thmb/x-avO9-nVjqFE3DTysL4v2tYw0w=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/kararileystringofpearls-16H-6765d3773cc84c70bdff1e0abe2bdd80.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/plant-guide2-1663799682.jpg?crop=0.559xw:1.00xh;0.441xw,0&resize=768:*\n",
            "https://assets.architecturaldigest.in/photos/602b6fd545056f7e9bba0b12/1:1/w_1280,h_1280,c_limit/how-to-take-care-of-Plants.jpg\n",
            "https://m.media-amazon.com/images/I/71fN7ABMuBL.jpg\n",
            "https://img.buzzfeed.com/buzzfeed-static/static/2023-03/21/21/campaign_images/e3caea31009c/best-indoor-plants-for-aspiring-plant-parents-2-1249-1679432654-0_dblbig.jpg?resize=1200:*\n",
            "https://jomostudio.com/cdn/shop/files/Monstera_Deliciosa_10b.jpg?v=1613604601&width=1600\n",
            "https://assets.vogue.in/photos/5d95b26ed3535f0008d721cd/2:3/w_2560%2Cc_limit/f.jpg\n",
            "https://www.bhg.com/thmb/fhVwPzxj7xwyTrVO2i_wMpEB7tM=/1244x0/filters:no_upscale():strip_icc()/geranium-pelargonium-daredevil-orchid-83449f70-4a919389b7c54fffb3340945067424fb.jpg\n",
            "https://www.lovethegarden.com/sites/default/files/styles/header_image_fallback/public/content/articles/shutterstock_579146950.jpg?itok=e2FjP_DW\n",
            "https://hips.hearstapps.com/vader-prod.s3.amazonaws.com/1692798908-the-sill_Large-Snake-Plant-Black-Coral_Large_Pallas_Cream_Variant.jpg?crop=1xw:0.966xh;center,top&resize=980:*\n",
            "https://canopyplantco.com/cdn/shop/files/canopy_plant_co-14site_460x@2x.jpg?v=1680095160\n",
            "https://hips.hearstapps.com/hmg-prod/images/plant-guide-1663941701.jpg?crop=0.423xw:1.00xh;0.551xw,0&resize=640:*\n",
            "https://dam.thdstatic.com/content/production/wwo3Cr-0MMZvTNB1MBJgCA/6d12ems2SGY4LSNIjKIzBQ/Crop%201:1/2023_3_Bird_of_Paradise_Plants_Crop%2011.jpg?im=Resize=(703,703)\n",
            "https://cityfurnish.com/blog/wp-content/uploads/2023/07/living-room-with-green-walls-green-wall-with-plants-it-min.jpg\n",
            "https://www.bhg.com/thmb/oDnjlrHprd67aYvinrMfQgVUPtQ=/5332x0/filters:no_upscale():strip_icc()/BHG-spider-plant-c0e0fdd5ec6e4c1588998ce3167f6579.jpg\n",
            "https://www.pennington.com//-/media/Project/OneWeb/Pennington/Images/blog/fertilizer/8-Steps-to-Growing-a-Healthy-Indoor-Garden-Anytime/how-to-grow-a-healthy-indoor-garden-h.jpg\n",
            "https://www.thespruce.com/thmb/NizOLt2Gb3gjI_EKnCog8ig-bhk=/3300x0/filters:no_upscale():max_bytes(150000):strip_icc()/most-popular-houseplants-4766580-2-71981826fb0a461786109b3e4f5aa09d.jpg\n",
            "https://hgtvhome.sndimg.com/content/dam/images/grdn/fullset/2015/8/7/0/CI_8-sunsparkler-sedum-lime-twister-7-4-14-2.jpg.rend.hgtvcom.1280.1280.suffix/1452976295326.jpeg\n",
            "https://hips.hearstapps.com/hmg-prod/images/peace-lily-plant-in-a-bright-home-royalty-free-image-1659025455.jpg?crop=0.668xw:1.00xh;0.0170xw,0&resize=980:*\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"big dog\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n27.append(i[\"original\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RsbbRZuUNWzO",
        "outputId": "a18de0cd-9a3c-47c5-ab7b-d56dbf79292f"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "https://www.forbes.com/advisor/wp-content/uploads/2023/05/great_dane.jpeg.jpg\n",
            "https://www.dailypaws.com/thmb/S6Iaa-eEk-2mUcuox_BV1oWbyVc=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/neapolitan-mastiff-with-woman-on-leash-2-77685259-2000-81fba6fbcb8244d2adb24e31cc082c78.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/large-dogs-doberman-pinscher-1586309915.jpg?crop=0.935xw:0.939xh;0.0493xw,0.0386xh&resize=980:*\n",
            "https://hips.hearstapps.com/hmg-prod/images/dog-gorgeous-afghan-hound-full-length-portrait-royalty-free-image-1691433974.jpg?crop=0.411xw:1.00xh;0.325xw,0&resize=980:*\n",
            "https://hips.hearstapps.com/hmg-prod/images/cane-corso-italiano-royalty-free-image-1646818531.jpg?crop=0.532xw:1.00xh;0.176xw,0&resize=980:*\n",
            "https://www.usatoday.com/gcdn/presto/2022/05/05/USAT/3a7147c5-0ecc-43c4-acbf-1e7843924aeb-Zeus_-_Tallest_Dog4.jpg?crop=2661,1996,x202,y0\n",
            "https://hips.hearstapps.com/ghk.h-cdn.co/assets/17/44/tibetan-mastiff.jpg?crop=1.00xw:0.667xh;0,0.0284xh&resize=980:*\n",
            "https://images.saymedia-content.com/.image/t_share/MTk3NTc0MzAxMDY5NjE2NDI5/large-dog-breed-information.jpg\n",
            "https://canna-pet.com/wp-content/uploads/2017/06/biggest-dog-breeds_canna-pet-1024x683.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/bernese-mountain-dog-royalty-free-image-1581013857.jpg?crop=0.87845xw:1xh;center,top&resize=980:*\n",
            "https://media.wired.com/photos/65651b7225ccbd8cc7d5403c/16:9/w_2400,h_1350,c_limit/Science-Life-Extension-Drug-for-Big-Dogs-Is-Getting-Closer-1330545769.jpg\n",
            "https://i.pinimg.com/564x/08/ab/51/08ab51fe0d57785c60a07ba0040adda3.jpg\n",
            "https://wisconsinpetcare.com/wp-content/uploads/2015/01/largedogcare.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/best-large-dog-breeds-samoyed-1583784001.jpg?crop=0.668xw:1.00xh;0.0357xw,0&resize=980:*\n",
            "https://c8.alamy.com/comp/EW6YHP/a-group-of-fifteen-common-large-breed-dogs-together-EW6YHP.jpg\n",
            "https://hips.hearstapps.com/goodhousekeeping/assets/16/15/neapolitan-mastiff.jpg\n",
            "https://s3.amazonaws.com/cdn-origin-etr.akc.org/wp-content/uploads/2017/11/02151216/Afghan-Hound-standing-in-a-garden-400x267.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/aggressive-dog-breeds-saint-bernard-1568905509.jpg?crop=0.736xw:1.00xh;0.156xw,0&resize=980:*\n",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a3/Calico_Daisy_and_Friend.jpg/800px-Calico_Daisy_and_Friend.jpg\n",
            "https://static.boredpanda.com/blog/wp-content/uploads/2020/12/5fd22f7c7a921-png__700.jpg\n",
            "https://www.southernliving.com/thmb/Rz-dYEhwq_82C5_Y9GLH2ZlEoYw=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/gettyimages-837898820-1-4deae142d4d0403dbb6cb542bfc56934.jpg\n",
            "https://img.buzzfeed.com/buzzfeed-static/static/2019-11/15/21/asset/1c06852f0c15/sub-buzz-611-1573852660-1.jpg?downsize=700%3A%2A&output-quality=auto&output-format=auto\n",
            "https://worldanimalfoundation.org/wp-content/uploads/2023/09/Big-Fluffy-Dog-Breeds-2-1.jpg\n",
            "https://i.insider.com/5a88659e7708e940071a671c?width=750&format=jpeg&auto=webp\n",
            "https://hips.hearstapps.com/hmg-prod/images/german-shepherd-dog-smiling-outdoors-royalty-free-image-1655393821.jpg?crop=0.66682xw:1xh;center,top&resize=980:*\n",
            "https://images.squarespace-cdn.com/content/v1/5e7d1a6f18b2b26e9726b89f/e38c0d10-7e0c-4758-aea3-b20ddc95aee0/banner2.png\n",
            "https://media.zenfs.com/en/purewow_185/89a8222338b0076ca1ec45b2757a501f\n",
            "https://www.whole-dog-journal.com/wp-content/uploads/2023/10/boerboel.jpg.optimal.jpg\n",
            "https://www.usatoday.com/gcdn/media/2021/05/14/USATODAY/usatsports/imageforentry66-xrt.jpg?width=700&height=394&fit=crop&format=pjpg&auto=webp\n",
            "https://www.purina-arabia.com/sites/default/files/2020-12/Dog_1098119012_Hero.jpg\n",
            "https://media-cldnry.s-nbcnews.com/image/upload/t_fit-760w,f_auto,q_auto:best/streams/2013/March/130307/1C6334671-boyleE4D206CE-25B2-30B9-8C2C-D3944DD69869.jpg\n",
            "https://www.thesprucepets.com/thmb/PqecxwUerx6EANDSDfpIf-QLqPw=/2137x0/filters:no_upscale():strip_icc()/GettyImages-1204183728-52153d591a6940379e7d3f4dd6f58f69.jpg\n",
            "https://thumbs.dreamstime.com/z/big-dog-3707388.jpg\n",
            "https://publish.purewow.net/wp-content/uploads/sites/2/2021/07/big-dog-breeds-akita.jpg?fit=680%2C489\n",
            "https://d3544la1u8djza.cloudfront.net/APHI/Blog/2023/August/giant-breeds-hero.jpg\n",
            "https://media.hswstatic.com/eyJidWNrZXQiOiJjb250ZW50Lmhzd3N0YXRpYy5jb20iLCJrZXkiOiJnaWZcL2JpZ2dlc3QtZG9nLXVwZGF0ZTEuanBnIiwiZWRpdHMiOnsicmVzaXplIjp7IndpZHRoIjo4Mjh9fX0=\n",
            "https://cdn.wamiz.fr/cdn-cgi/image/format=auto,quality=80,width=1200,height=675,fit=cover/article/main-picture/5fe4766e2e831122268467.jpg\n",
            "https://www.nylabone.com/-/media/project/oneweb/nylabone/images/dog101/10-great-large-dog-breeds/two_saint_bernard_dogs_cropped.jpg\n",
            "https://cdn.petcarerx.com/cdn-cgi/image/fit=pad,width=1200cdn.petcarerx.com/LPPE/images/articlethumbs/Are-You-Ready-For-A-Really-Big-Dog-Large.jpg\n",
            "https://bigheartsbigdogs.com/wp-content/uploads/2019/03/big-dog-png-hd-dog-american-pets-png-519.png\n",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Big_dog_military_robots.jpg/1200px-Big_dog_military_robots.jpg\n",
            "https://external-preview.redd.it/_eb24rgx0_7Fn64JLup8xVgpxK-QjKDgZxfMe25uJek.png?format=pjpg&auto=webp&s=1b63dc4ead214230229786362e8c29c524675bf1\n",
            "https://hips.hearstapps.com/hmg-prod/images/large-dog-breeds-pit-bull-terrier-1646847017.jpg?crop=1xw:0.9372071227741331xh;center,top&resize=980:*\n",
            "https://publish.purewow.net/wp-content/uploads/sites/2/2021/07/big-dog-breeds-bull-mastiff.jpg?fit=728%2C524\n",
            "https://www.battersea.org.uk/sites/default/files/inline-images/A%20large%20dog%20laying%20over%20the%20laps%20of%20two%20people.jpg\n",
            "https://anasazivet.com/wp-content/uploads/2019/06/kaitlyn-rigg-1668018-unsplash-1-1080x675.jpg\n",
            "https://www.usatoday.com/money/blueprint/images/uploads/2024/01/03063159/largest-dog-breeds.jpg?width=700&fit=cover&format=webp\n",
            "https://i.pinimg.com/736x/e4/b5/18/e4b51802e3c2735014d40b5b9cc979f9.jpg\n",
            "https://i2-prod.mirror.co.uk/incoming/article31332869.ece/ALTERNATES/s1200c/0_Im-the-owner-of-the-UKs-biggest-dog-he-eats-a-whole-chicken-every-day-and-his-diet-costs-me-%C2%A34k.jpg\n",
            "https://paradepets.com/.image/ar_4:3%2Cc_fill%2Ccs_srgb%2Cfl_progressive%2Cq_auto:good%2Cw_1200/MTkxMzY1Nzg4NjcyNzMwNjU3/best-large-dog-breeds-jpg.jpg\n",
            "https://www.marthastewart.com/thmb/_JzAr6QgqkXMMvkYepvjxaEOJXs=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/rottweiler-getty-0120-2c219c541e4e46f88d15e4b1f34fef97.jpg\n",
            "https://images.saymedia-content.com/.image/ar_16:9%2Cc_fill%2Ccs_srgb%2Cq_auto:eco%2Cw_1200/MTgwODM0MzUxMTU4NjY2NjAw/top-10-largest-dog-breeds-2.png\n",
            "https://www.southernliving.com/thmb/pUseJBgZim9ViUNPbbrrdjQbKHk=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/gettyimages-813935794-1-d79bdadd5ff04009a1c90dc3febcd006.jpg\n",
            "https://mediaproxy.salon.com/width/1200/https://media2.salon.com/2013/11/large_dog.jpg\n",
            "https://m.media-amazon.com/images/I/81I9CzZIOBL._AC_UF1000,1000_QL80_.jpg\n",
            "https://i.ytimg.com/vi/jNXKKdTjopw/maxresdefault.jpg\n",
            "https://media.hswstatic.com/eyJidWNrZXQiOiJjb250ZW50Lmhzd3N0YXRpYy5jb20iLCJrZXkiOiJnaWZcL3BsYXlcLzQ5MDRlNTQzLWEyMTMtNGYxZS04YjI2LTZiMzZkMGVjMDg4Yi0xOTIwLTEwODAuSlBHIiwiZWRpdHMiOnsicmVzaXplIjp7IndpZHRoIjo4Mjh9fX0=\n",
            "https://www.forbes.com/advisor/wp-content/uploads/2023/05/Mastiff-1.jpg\n",
            "https://keyassets.timeincuk.net/inspirewp/live/wp-content/uploads/sites/14/2023/07/W9KHTK-920x518.jpg\n",
            "https://dogtime.com/wp-content/uploads/sites/12/2009/05/leonberger-dog-breed.jpg\n",
            "https://s.yimg.com/ny/api/res/1.2/laXFVfvKFCUvXM9lb2IWAg--/YXBwaWQ9aGlnaGxhbmRlcjt3PTY0MDtoPTQ2NA--/https://media.zenfs.com/en-us/purewow_185/41168367900d3936f9c4b5333dc8da43\n",
            "https://publish.purewow.net/wp-content/uploads/sites/2/2021/07/big-dog-breeds-doberman.jpg?fit=728%2C524\n",
            "https://hips.hearstapps.com/hmg-prod/images/large-dogs-australian-shepherd-1586306132.jpg?crop=0.8890371358683568xw:1xh;center,top&resize=980:*\n",
            "https://i.huffpost.com/gen/1609807/thumbs/o-BIG-DOG-570.jpg?5\n",
            "https://i.pinimg.com/564x/12/cc/ce/12ccce9265b44ef80c4f1ddf3aca20f8.jpg\n",
            "https://www.whole-dog-journal.com/wp-content/uploads/2022/07/giant-dog-breeds.png\n",
            "https://cdn-prd.content.metamorphosis.com/wp-content/uploads/sites/2/2020/12/shutterstock_792985384-2.jpg\n",
            "https://thesavvysitter.org/wp-content/uploads/2022/08/dog-sizes-1-1024x595.jpg\n",
            "https://images.unsplash.com/photo-1628579550131-a99284d5b330?q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8YmlnJTIwZG9nfGVufDB8fDB8fHww\n",
            "https://www.pumpkin.care/wp-content/uploads/2021/10/large-dog-breeds.jpg\n",
            "https://img.money.com/2023/12/Biggest-Dog-Breeds-Giant-Schnauzer.jpg\n",
            "https://d.newsweek.com/en/full/1850543/greater-swiss-mountain-dog-st-bernard.jpg\n",
            "https://i.redd.it/z8ieikot0mg41.jpg\n",
            "https://paradepets.com/.image/ar_1:1%2Cc_fill%2Ccs_srgb%2Cfl_progressive%2Cq_auto:good%2Cw_1200/MTk4NjYyMDc0MDE0OTAyMDIz/biggest-dog-breeds-great-dane.jpg\n",
            "https://hips.hearstapps.com/ghk.h-cdn.co/assets/17/30/bernese-mountain-dog.jpg?crop=1.00xw:0.668xh;0,0.252xh&resize=640:*\n",
            "https://hips.hearstapps.com/hmg-prod/images/alaskan-malamute-adult-dog-lying-at-the-blossoming-royalty-free-image-1691436955.jpg?crop=0.536xw:1.00xh;0.266xw,0&resize=980:*\n",
            "https://www.rd.com/wp-content/uploads/2021/07/GettyImages-869426624-e1627327756797.jpg\n",
            "http://justrawpetfood.ca/cdn/shop/articles/Screen_Shot_2021-02-25_at_11.48.30_AM_1024x1024.png?v=1614272002\n",
            "https://c02.purpledshub.com/uploads/sites/41/2023/05/great-dane-Hero-195f61a.jpg?w=1029&webp=1\n",
            "https://hips.hearstapps.com/hmg-prod/images/large-dog-breeds-lead-1550810820.jpg\n",
            "https://i.ytimg.com/vi/R06YbETsnVg/sddefault.jpg\n",
            "https://thumbs.dreamstime.com/b/big-dog-breeds-cute-cartoon-design-vector-puppy-cartoons-illustration-children-fun-afghan-animal-145748965.jpg\n",
            "https://www.thesprucepets.com/thmb/KB8ESuUVJ5RBSG_2la2xQjB6SHI=/3870x0/filters:no_upscale():strip_icc()/dog-looking-away-while-standing-on-grass-640399007-5c3186c246e0fb000151975c.jpg\n",
            "https://lookaside.fbsbx.com/lookaside/crawler/media/?media_id=854239898357771\n",
            "https://media.cbs8.com/assets/KFMB/images/57dd249a-b41f-437d-8021-9f4142de185d/57dd249a-b41f-437d-8021-9f4142de185d_1920x1080.jpg\n",
            "https://www.thesun.co.uk/wp-content/uploads/2023/10/0d365892-aa86-409e-82e9-878dd90e7f5d.jpg\n",
            "https://miro.medium.com/v2/resize:fit:1400/1*ZgWy8t1nRfl_ysjnov9aUg.jpeg\n",
            "https://cdn-prd.content.metamorphosis.com/wp-content/uploads/sites/2/2020/12/shutterstock_743852146-2.jpg\n",
            "https://image.petmd.com/files/styles/978x550/public/2023-08/biggest-dog-breeds.jpg\n",
            "https://www.rover.com/blog/wp-content/uploads/2017/05/1280px-Bull_terier_i_bull_terier_miniatura_d46.jpg\n",
            "https://www.insidedogsworld.com/wp-content/uploads/2016/09/stbernard.jpg\n",
            "https://cdn.shopify.com/s/files/1/0098/0828/1655/products/1102-99999-0895-026-1d_facfb3fe-30bb-42cc-b099-54698f21d895_600x.jpg?v=1707332690\n",
            "https://bowwowinsurance.com.au/wp-content/uploads/2022/03/shutterstock_425360206-ed-Little-girl-posing-against-a-big-dog-2-Copy.jpg\n",
            "https://images.saymedia-content.com/.image/t_share/MTgwODM0MzUxMTU4NjY2NjAw/top-10-largest-dog-breeds-2.png\n",
            "https://www.marthastewart.com/thmb/9VsrWpZgmjnA--X4PpeFoAFuvRc=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/doberman-pinscher-getty-0120-8cd3de21b61040a48a97eb1ee4df4312.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/large-dogs-dalmatian-1586310560.jpg?crop=0.810xw:0.810xh;0.0289xw,0.190xh&resize=980:*\n",
            "https://arlingtoncondo.com/wp-content/uploads/2018/08/GreatDaneBigDogWide.jpg\n",
            "https://www.somerzby.com.au/wp-content/uploads/2018/08/the-ultimate-list-of-big-dog-breeds.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/large-dogs-rees-labs-1646845144.jpeg\n",
            "https://static01.nyt.com/images/2023/09/22/multimedia/22small-bigdogs-03-kmhw/22small-bigdogs-03-kmhw-superJumbo-v3.jpg\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"small dog\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n26.append(i[\"original\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WZgIdbu7NKim",
        "outputId": "75acef54-db11-4201-d2a3-e0e6bcf62446"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "https://hips.hearstapps.com/hmg-prod/images/best-small-dog-breeds-chihuahua-1598967884.jpg?crop=0.449xw:0.842xh;0.245xw,0.0337xh&resize=980:*\n",
            "https://hips.hearstapps.com/hmg-prod/images/red-small-german-spitz-walking-in-the-autumn-park-royalty-free-image-1580496879.jpg?crop=0.670xw:1.00xh;0.173xw,0&resize=980:*\n",
            "https://www.southernliving.com/thmb/T7w8WdCU-D9HelAFcDGwZJ5fmas=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/gettyimages-996939804-1-9bb01421ef63450f8950ee00744d9e66.jpg\n",
            "https://hips.hearstapps.com/goodhousekeeping/assets/16/08/gettyimages-179494696.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/portrait-of-dog-royalty-free-image-1682344149.jpg?crop=1.00xw:0.667xh;0,0.158xh&resize=980:*\n",
            "https://hips.hearstapps.com/hmg-prod/images/portrait-of-white-dog-on-field-royalty-free-image-1682310209.jpg?crop=0.580xw:0.870xh;0.318xw,0.130xh&resize=980:*\n",
            "https://hips.hearstapps.com/hmg-prod/images/best-small-dog-breeds-maltese-1598990797.jpg?crop=0.536xw:1.00xh;0.264xw,0&resize=980:*\n",
            "https://www.lonetreevet.com/blog/wp-content/uploads/2021/07/iStock-1128461217-1-2000x1333.jpg\n",
            "https://hgtvhome.sndimg.com/content/dam/images/hgtv/fullset/2022/6/16/1/shutterstock_1862856634.jpg.rend.hgtvcom.1280.1280.suffix/1655430860853.jpeg\n",
            "http://ghk.h-cdn.co/assets/18/01/1024x1535/gallery-gettyimages-136544176.jpg\n",
            "https://www.southernliving.com/thmb/WHH7cdFT3YMJlJN4y7y3lsAKvJ8=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/gettyimages-114166947-1-268128f97e5c415baede328c1fe32f55.jpg\n",
            "https://cdn.shopify.com/s/files/1/1897/4203/files/1_3fca905f-6b20-4613-842f-18f4548e20f3.jpg?v=1606289120\n",
            "https://hips.hearstapps.com/hmg-prod/images/small-dogs-toy-poodle-1563780396.jpg?crop=0.524xw:0.790xh;0.245xw,0.167xh&resize=1200:*\n",
            "https://www.thesprucepets.com/thmb/mjUFLdsMqhggvgc4WNhuzfs3CQ0=/2094x0/filters:no_upscale():strip_icc()/portrait-if-a-spitz-pomeranian_t20_v3o29E-5ae9bbdca18d9e0037d95983.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/best-small-dog-breeds-pomeranian-1598990901.jpg?crop=0.444xw:1.00xh;0.272xw,0&resize=980:*\n",
            "https://www.sheknows.com/wp-content/uploads/2018/08/mvjxbd3ialygojs0vzl8.jpeg\n",
            "https://hips.hearstapps.com/hmg-prod/images/close-up-of-beagle-looking-away-while-standing-on-royalty-free-image-1647334715.jpg?crop=0.535xw:1.00xh;0.351xw,0&resize=980:*\n",
            "https://s3.amazonaws.com/cdn-origin-etr.akc.org/wp-content/uploads/2022/08/15113000/Chihuahua-walking-in-the-backyard.jpg\n",
            "https://www.bil-jac.com/media/yffn143k/benefitsofsmallbreeddogs-image.jpg?anchor=center&mode=crop&width=1024&height=512&format=webp&quality=70\n",
            "https://www.nylabone.com/-/media/project/oneweb/nylabone/images/dog101/activities-fun/10-great-small-dog-breeds/maltese-portrait.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/small-dogs-maltese-1563779438.jpg?crop=0.6857962697274032xw:1xh;center,top&resize=980:*\n",
            "http://static1.squarespace.com/static/625ee79ee923a609e4bf10fa/t/62f1777fad1b270e3198fd14/1659991941733/Screen+Shot+2022-08-08+at+2.51.37+PM.png?format=1500w\n",
            "https://image.petmd.com/files/inline-images/small-dogs-bichon-frise.jpg?VersionId=_sYMy3g.KeuqSjkDOWZmCyQNae5TFsu0\n",
            "https://www.forbes.com/advisor/wp-content/uploads/2023/07/top-20-small-dog-breeds.jpeg.jpg\n",
            "https://www.sheknows.com/wp-content/uploads/2023/06/cute-small-dog-breeds.jpg\n",
            "https://www.pdinsurance.co.nz/wp-content/uploads/2023/04/small-dog-breeds-for-apartments-nz-lead.jpg\n",
            "https://tomkingskennel.com/wp-content/uploads/2022/11/small-dog-breeds-tomkings-puppies-blog-1-1024x683.jpg.webp\n",
            "https://www.rover.com/blog/wp-content/uploads/2017/06/two-maltese.jpg\n",
            "https://hips.hearstapps.com/ghk.h-cdn.co/assets/17/29/bichon-frise.jpg?crop=1.00xw:0.667xh;0,0.143xh&resize=980:*\n",
            "https://image.petmd.com/files/inline-images/small-dogs-cavalier-king-charles-spaniel.jpg?VersionId=9nodS_nFOU5VMqhTkdZL5cix7MXZYC2w\n",
            "https://i.ytimg.com/vi/8fojY1M4ts0/sddefault.jpg\n",
            "https://s.yimg.com/ny/api/res/1.2/.Hp6oKt8CBbl4CVfQ4f4Cg--/YXBwaWQ9aGlnaGxhbmRlcjt3PTY0MDtoPTQ2MQ--/https://media.zenfs.com/en/purewow_185/3c439418bd172db5fa9d758ee94162a8\n",
            "https://www.nylabone.com/-/media/project/oneweb/nylabone/images/dog101/activities-fun/10-great-small-dog-breeds/shih-tzu-portrait.jpg\n",
            "https://hgtvhome.sndimg.com/content/dam/images/hgtv/fullset/2022/6/16/1/shutterstock_733569046.jpg.rend.hgtvcom.616.411.suffix/1655430860333.jpeg\n",
            "https://cdn.shopify.com/s/files/1/0601/7405/files/French_Bulldog_Puppy_480x480.jpg?v=1648151528\n",
            "https://i.pinimg.com/originals/f2/71/98/f27198de4aff554a248244b17fe6fed2.jpg\n",
            "https://image.petmd.com/files/inline-images/small-dogs-shih-tzu.jpg?VersionId=suKYJdWRuC.SOYqHdooyY2Nqsl0BOfew\n",
            "https://d.newsweek.com/en/full/1798252/pug.jpg?w=1600&h=1600&q=88&f=1be14942e4aa40e7b63f5870b5934921\n",
            "http://images.ctfassets.net/aynow2efrlx4/4yF425sqCDxys5gmCczkFc/37f0f97153020a96b53b5ea69d6df80c/Dachshunds-3.jpg?w=1000&h=1000\n",
            "https://i.pinimg.com/564x/79/c3/dc/79c3dc3584aef3d084816e7104e1b9ce.jpg\n",
            "https://media-cldnry.s-nbcnews.com/image/upload/t_fit-760w,f_auto,q_auto:best/msnbc/Components/Photos/070405/070405_mini_mutts_vlrg_12p.jpg\n",
            "https://cdn.apartmenttherapy.info/image/upload/v1673365965/Chinese-Crested-On-White-01.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/closeup-of-a-black-russian-tsvetnaya-bolonka-royalty-free-image-1681161235.jpg?crop=0.563xw:1.00xh;0.204xw,0&resize=1200:*\n",
            "https://www.thesprucepets.com/thmb/38EI-zLR_Rac46T-Xy6G0ulBmNs=/3000x0/filters:no_upscale():strip_icc()/cute-teacup-dog-breeds-4587847-hero-4e1112e93c68438eb0e22f505f739b74.jpg\n",
            "https://www.southernliving.com/thmb/TFiYMdR1dMmNSyTSEAs2v6EaXeU=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/gettyimages-932004182-1-93a47e5847ee41e18009b97c0ca5cf0d.jpg\n",
            "https://www.nylabone.com/-/media/project/oneweb/nylabone/images/dog101/activities-fun/10-great-small-dog-breeds/boston-terrier-portrait.jpg\n",
            "https://www.purina.com/sites/default/files/media/image/TOY_Brussels-Griffon.jpg\n",
            "https://katv.com/resources/media2/16x9/full/1015/center/80/e9059ae3-4cd8-4406-8f58-e4ded15d4a72-large16x9_KatieLehnerDirectUploader23rdAug202222_54UTC.jpeg\n",
            "https://www.womansworld.com/wp-content/uploads/2023/01/shutterstock_2163051473-1.jpg\n",
            "https://www.southernliving.com/thmb/E9JwwZOXo2f3g0_j0kL5y6VSHs4=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/gettyimages-157603003-1-ce706a0b211446efb5c1bc51af678941.jpg\n",
            "https://d3544la1u8djza.cloudfront.net/APHI/Blog/2023/September/small-breeds-hero.jpg\n",
            "https://d2zp5xs5cp8zlg.cloudfront.net/image-68121-800.jpg\n",
            "https://www.nylabone.com/-/media/project/oneweb/nylabone/images/dog101/activities-fun/10-great-small-dog-breeds/pomeranian-portrait.jpg\n",
            "https://www.wideopenspaces.com/wp-content/uploads/sites/3/2016/06/Smallest-Dog-Breeds-Toy-Poodle.png?fit=1200%2C800\n",
            "https://hips.hearstapps.com/hmg-prod/images/dog-yorkshire-terrier-lies-on-the-floor-with-paws-royalty-free-image-1682539706.jpg?crop=1xw:0.84415xh;center,top&resize=1200:*\n",
            "https://bestlifeonline.com/wp-content/uploads/sites/3/2022/12/small-dog-breeds.jpg?quality=82&strip=all\n",
            "https://img.etimg.com/photo/98702169/98702169.jpg\n",
            "https://www.thisdogslife.co/wp-content/uploads/2019/10/Small-Dog-Syndrome-.jpg\n",
            "https://d.ibtimes.com/en/full/3059772/top-18-reasons-choose-small-dog-breeds-over-big-ones.jpg?w=736&f=1eaebb35e012039a8c9cfae515a6d121\n",
            "https://images.saymedia-content.com/.image/ar_4:3%2Cc_fill%2Ccs_srgb%2Cq_auto:eco%2Cw_1200/MTk2NDcxNjYzNzc5MzkwOTYy/small-dog-or-large.png\n",
            "https://www.extremedogfence.com/wp-content/uploads/2023/04/Pomeranian.jpg\n",
            "https://www.hartz.com/wp-content/uploads/2012/06/five_things_all_small_dog_owners_should_know_2000x786.jpg\n",
            "https://d.newsweek.com/en/full/1780021/pekingese.jpg?w=1200&f=2cc118238e793aca4ef3818f49063d25\n",
            "https://cdn.buttercms.com/D44mtLUqQ0KfqJNu814B\n",
            "https://hips.hearstapps.com/hmg-prod/images/small-dog-breeds-shetland-sheepdog-1608227319.jpg?crop=0.425xw:0.848xh;0.264xw,0.149xh&resize=980:*\n",
            "https://www.rd.com/wp-content/uploads/2021/06/GettyImages-1205998407-e1624731290663.jpg?fit=700,467\n",
            "https://media-be.chewy.com/wp-content/uploads/2021/06/03163602/American-Eskimo-Dog-FeaturedImage-768x461.jpg\n",
            "https://www.dinkydogclub.com/cdn/shop/articles/Top_25_Small_Breed_Dogs_in_America_1_1600x.jpg?v=1648166676\n",
            "https://image.petmd.com/files/inline-images/small-dogs-alaskan-klee-kai.jpg?VersionId=JOFYxo8q3.Uwm6gPBa77Zr3Qp0E1Xl5Y\n",
            "https://d.newsweek.com/en/full/1795053/bichon-frise-dog-looking.jpg?w=1200&f=89c416d11939993b80b30b09cfb4ff71\n",
            "https://hips.hearstapps.com/hmg-prod/images/portrait-of-chihuahua-sitting-royalty-free-image-1682306184.jpg\n",
            "https://paradepets.com/.image/t_share/MTkxMzY1Nzg4MTM2NzExNzc4/teacup-dogs-jpg.jpg\n",
            "https://globalnews.ca/wp-content/uploads/2014/04/18-8ccab938b95c780e0090a0b533205477.jpg?quality=85&strip=all\n",
            "https://media-be.chewy.com/wp-content/uploads/2021/06/18084057/BiewerTerrier-FeaturedImage-768x461.jpg\n",
            "https://th-thumbnailer.cdn-si-edu.com/QrqzX-HQuX0e1gNvCd3M6x74LXE=/1000x750/filters:no_upscale():focal(800x602:801x603)/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer_public/4a/7e/4a7e6b33-da3c-45ab-a93e-5616f6abad67/gettyimages-200527757-001_web.jpg\n",
            "https://paradepets.com/.image/t_share/MTkxMzY1Nzg5MjIyMzgxMDg5/portrait-pomeranian-dog.jpg\n",
            "https://t4.ftcdn.net/jpg/05/61/13/61/360_F_561136149_V7GT6r7BL2GSdK5ZzcRUXUlhgCxCYq2q.jpg\n",
            "https://s3.amazonaws.com/cdn-origin-etr.akc.org/wp-content/uploads/2017/11/24113349/Bolognese-standing-in-profile-outdoors-400x267.jpg\n",
            "https://www.uk.pedigree.com/cdn-cgi/image/format=auto,q=90/sites/g/files/fnmzdf5126/files/2023-06/pexels-sarah-chai-7282710.jpg\n",
            "https://images.saymedia-content.com/.image/t_share/MTk2NDU2NjQxMDU3NTMxMDMw/small-dog-breeds-good-with-families.png\n",
            "https://hips.hearstapps.com/hmg-prod/images/yorkshire-terrier-dog-sitting-close-up-on-nature-royalty-free-image-1682308117.jpg?crop=0.70029xw:1xh;center,top&resize=980:*\n",
            "https://www.southernliving.com/thmb/kClbGpTCO1TjyPojInpjZy5N0tA=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/gettyimages-168269399-1-504f46df5e7b4c23b90282abe5badef9.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/gettyimages-1324942056.jpg?crop=1.00xw:0.670xh;0,0.175xh&resize=640:*\n",
            "https://hips.hearstapps.com/hmg-prod/images/bedlington-1665690563.jpg?crop=0.536xw:1.00xh;0.284xw,0&resize=980:*\n",
            "https://cdn-images.vetstreet.com/e2/aa/76e23540498b9b21f6a8414015ad/boston-terrier-590mk091613.jpg\n",
            "https://www.nylabone.com/-/media/project/oneweb/nylabone/images/dog101/activities-fun/10-great-small-dog-breeds/yorkshire-terrier.jpg\n",
            "https://tomkingskennel.com/wp-content/uploads/2022/11/small-dog-breeds-tomkings-puppies-blog-yorkie.jpg.webp\n",
            "https://canna-pet.com/wp-content/uploads/2017/07/smallest-dog-breeds_canna-pet-e1499616397247.jpg\n",
            "https://image.petmd.com/files/styles/863x625/public/2023-08/small-dog-breeds.jpg\n",
            "https://hips.hearstapps.com/hmg-prod/images/small-fluffy-dog-breeds-shih-tzu-1622652006.jpg\n",
            "https://smalldogsminnesota.org/wp-content/uploads/bb-plugin/cache/travel-dog-768x768-square-c1a17f65f7647ff73f8ce6896a7d986f-.png\n",
            "https://studyfinds.org/wp-content/uploads/2023/05/7dybeqdayda.jpg\n",
            "https://worldanimalfoundation.org/wp-content/uploads/2023/10/Small-White-Dog-Breeds.jpg\n",
            "https://www.dogster.com/wp-content/uploads/2024/02/Small-Dog-vs-Medium-Dog.jpg\n",
            "https://www.thesprucepets.com/thmb/VyxTyBVyx8uq9G7B1z2VqnoIZfE=/3442x0/filters:no_upscale():strip_icc()/adorable-tiny-puppy-posing-outdoors-610004826-5c8be6f3c9e77c0001eb1bdd.jpg\n",
            "https://thumbor.bigedition.com/yorkshire-terrier/LOCSuUsVwr25xxT-yn4iNoiEGZ8=/800x0/filters:quality(80)/granite-web-prod/fa/71/fa71f0b2972a45498ed27289f54ff0ae.jpg\n",
            "http://cdn.akc.org/content/article-body-image/minatureschnauzer.jpg\n",
            "https://www.belleforestanimalhospital.com/files/ShihTzu-original.jpeg\n",
            "https://hips.hearstapps.com/hmg-prod/images/chihuahua-small-dog-1647252817.jpg?crop=0.667xw:1.00xh;0.181xw,0&resize=980:*\n",
            "https://images.saymedia-content.com/.image/ar_1:1%2Cc_fill%2Ccs_srgb%2Cfl_progressive%2Cq_auto:eco%2Cw_1200/MjA0MDcyNzc4MjUxMzgwMjE5/the-10-low-maintenance-small-dog-breeds.jpg\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"river\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n25.append(i[\"original\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FaXCJTR7NGqe",
        "outputId": "03e55e65-303f-4514-d214-f465780b3a7a"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "https://upload.wikimedia.org/wikipedia/commons/d/de/Elwha_River_-_Humes_Ranch_Area2.JPG\n",
            "https://smartwatermagazine.com/sites/default/files/styles/thumbnail-830x455/public/what_is_a_river.jpg?itok=7SHK_wQm\n",
            "https://static.toiimg.com/photo/msid-101267463,width-96,height-65.cms\n",
            "https://img.traveltriangle.com/blog/wp-content/uploads/2018/11/Rivers-of-the-World-Cover.jpg\n",
            "https://images.nationalgeographic.org/image/upload/t_edhub_resource_key_image/v1638886653/EducationHub/photos/jinsha-river.jpg\n",
            "https://cdn.britannica.com/16/116016-050-E94D67B6/Huang-He-China.jpg\n",
            "https://www.collinsdictionary.com/images/full/river_377603497_1000.jpg\n",
            "https://www.americanrivers.org/wp-content/uploads/2023/01/YubaRiver_hero.png\n",
            "https://cdn.britannica.com/21/148621-050-44D8187E/Kananaskis-River-Alberta-Canada.jpg\n",
            "https://www.americanrivers.org/wp-content/uploads/2021/04/Hoh-River_Colin-Wiseman-1-1024x767.jpeg\n",
            "https://images.nationalgeographic.org/image/upload/t_edhub_resource_key_image/v1638892070/EducationHub/photos/grand-canyon-colorado-river.jpg\n",
            "https://ichef.bbci.co.uk/images/ic/1920xn/p0722kk6.jpg\n",
            "https://images.pexels.com/photos/2438/nature-forest-waves-trees.jpg?cs=srgb&dl=pexels-pixabay-2438.jpg&fm=jpg\n",
            "http://shoalconservation.org/wp-content/uploads/2023/02/dan-roizer-GygPFmXGD1o-unsplash-scaled.jpg\n",
            "https://i0.wp.com/geologyscience.com/wp-content/uploads/2023/01/rural-summer-sunset-landscape-with-river-dramatic-colorful-sky-natural-background-aerial-view_548832-2395.jpg?fit=2000%2C1332&ssl=1\n",
            "https://www.fisheries.noaa.gov/s3//styles/media_750_x500/s3/2022-02/750x500-elwha-river-credit-john-mcmillan.jpg?itok=4vwfC3a-\n",
            "https://www.rivers.gov/rivers/sites/rivers/files/2022-09/wooley_creek_klamath_river_ca.jpg\n",
            "https://siwi.org/wp-content/uploads/2021/07/why-water_topics-present-at-launch_rivers2.jpg\n",
            "https://t3.ftcdn.net/jpg/01/13/46/78/360_F_113467839_JA7ZqfYTcIFQWAkwMf3mVmhqXr7ZOgEX.jpg\n",
            "https://natureconservancy-h.assetsadobe.com/is/image/content/dam/tnc/nature/en/photos/d/u/Duck_River_reflections_-_20130915-143_HDR_4000x2200.jpg?crop=0%2C0%2C4000%2C2200&wid=4000&hei=2200&scl=1.0\n",
            "https://images.unsplash.com/photo-1437482078695-73f5ca6c96e2?q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8cml2ZXJ8ZW58MHx8MHx8fDA%3D\n",
            "https://cdn.cheapism.com/images/iStock-1304123810.5bf445f0.fill-1440x605.jpg\n",
            "https://images.twinkl.co.uk/tw1n/image/private/t_630/u/ux/calm-river_ver_1.jpg\n",
            "https://i.ytimg.com/vi/4aGwPmVNW9k/hq720.jpg?sqp=-oaymwEhCK4FEIIDSFryq4qpAxMIARUAAAAAGAElAADIQj0AgKJD&rs=AOn4CLCAXUJ7gnmRN7EGDL3ArNmbJN8LZA\n",
            "https://media.hswstatic.com/eyJidWNrZXQiOiJjb250ZW50Lmhzd3N0YXRpYy5jb20iLCJrZXkiOiJnaWZcL2FtYXpvbi1yaXZlci5qcGciLCJlZGl0cyI6eyJyZXNpemUiOnsid2lkdGgiOjgyOH19fQ==\n",
            "https://www.americanrivers.org/wp-content/uploads/2021/01/Colorado-River-AZ_Fred-Phillips.-paris-climate-agreementjpg-scaled-1.jpg\n",
            "https://cdn.britannica.com/33/130033-050-95161CF5/view-Amazon-River-Brazil.jpg\n",
            "https://study.com/cimages/videopreview/7k7r2e7uer.jpg\n",
            "https://www.whoi.edu/wp-content/uploads/2019/03/rivers.jpg\n",
            "https://upload.wikimedia.org/wikipedia/commons/e/e9/2021-06-16_09_10_03_View_of_the_Delaware_Water_Gap_from_the_Delaware_River_Viaduct_over_the_Delaware_River_on_the_border_of_Knowlton_Township%2C_Warren_County%2C_New_Jersey_and_Upper_Mount_Bethel_Township%2C_Northampton_County%2C_Pennsylvania.jpg\n",
            "https://i.cbc.ca/1.7100848.1706734711!/fileImage/httpImage/image.jpg_gen/derivatives/16x9_780/magpie-4th-chute.jpg\n",
            "https://samuelearp.com/wp-content/uploads/2023/05/Kawarau-River-Samuel-Earp-Landscape-oil-painting-4.jpeg\n",
            "https://images.pexels.com/photos/1179225/pexels-photo-1179225.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\n",
            "https://momentumriverexpeditions.com/wp-content/uploads/2016/01/illinos-river-below-klondike-scaled.jpg\n",
            "https://cdn.britannica.com/87/187-050-D8600B56/Feluccas-Nile-River-Luxor-Upper-Egypt.jpg\n",
            "https://c02.purpledshub.com/uploads/sites/41/2023/09/top-10-river-1.jpg\n",
            "https://cdn.pixabay.com/photo/2024/01/04/16/48/landscape-8487906_1280.jpg\n",
            "https://physicsworld.com/wp-content/uploads/2019/09/Concave-river.jpg\n",
            "https://www.americanrivers.org/wp-content/uploads/2022/12/delaware-river-credit-nicholas-tonelli-header.jpg\n",
            "https://fmr.org/files/gorge-jimhudak.png\n",
            "https://static.toiimg.com/thumb/msid-100639554,width-748,height-499,resizemode=4,imgsize-214948/These-colourful-lakes-and-rivers-in-the-world-are-hypnotic.jpg\n",
            "https://www.nps.gov/subjects/culturallandscapes/images/GLAC_FlatheadWSR.jpg?maxwidth=1300&maxheight=1300&autorotate=false\n",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Escudo_del_C_A_River_Plate.svg/640px-Escudo_del_C_A_River_Plate.svg.png\n",
            "https://www.pewtrusts.org/-/media/post-launch-images/2022/09/waterways/2/16x9_m.jpg\n",
            "https://i.pinimg.com/736x/36/e9/8b/36e98bd97ad59953da4c7474b95529bc.jpg\n",
            "https://freshwaterhabitats.b-cdn.net/app/uploads/2023/08/iStock-1001529608-scaled.jpg?width=850&quality=85\n",
            "https://t3.ftcdn.net/jpg/01/90/18/20/360_F_190182089_kVJgPPov9cI0AJ84CdCVqVxx2a57928j.jpg\n",
            "https://www.watereducation.org/sites/main/files/imagecache/medium/main-images/norcaltour3-sacramento-river.jpg?1637047272\n",
            "https://www.telegraph.co.uk/content/dam/travel/Spark/collette/yangtze-river.jpg\n",
            "https://www.reconnectwithnature.org/getmedia/f87dee99-6f02-4768-8ff7-0bb6813bddde/River-vs-stream-Chad-Merda.jpg?width=1500&height=1047&ext=.jpg\n",
            "https://water.utah.gov/wp-content/uploads/colorado-river/1.jpg\n",
            "https://media.npr.org/assets/img/2023/04/27/img_2607_slide-4b08491e472835b8c189e3b404dc721ab3119faa.jpg\n",
            "https://umd-today.transforms.svdcdn.com/production/hero/shutterstock_483241345_1920x1080.jpg?w=1920&h=1080&auto=compress%2Cformat&fit=crop&dm=1694464520&s=0a3f6b0c2b99831c92daec9b13e213b1\n",
            "https://static01.nyt.com/images/2024/01/12/science/00cli-COLORADORIVER/00cli-COLORADORIVER-mediumSquareAt3X.jpg\n",
            "https://images.nationalgeographic.org/image/upload/v1652301828/EducationHub/photos/fly-fishing.jpg\n",
            "https://www.worldatlas.com/upload/15/cb/6a/shutterstock-1288634608.jpg\n",
            "https://www.pewtrusts.org/-/media/post-launch-images/2022/03/rivers/rogue-riverkyle-sullivan-blmjpgmaster/16x9_m.jpg\n",
            "https://assets.editorial.aetnd.com/uploads/2014/07/gettyimages-463899083.jpg\n",
            "https://static.politico.com/b9/d3/c88d0fae4a11919a0ecc273f4c28/colorado-river-drought-30704.jpg\n",
            "https://cdn.cheapism.com/images/Alabama_Cahaba_River.max-825x550.png\n",
            "https://www.worldatlas.com/r/w768/upload/dd/97/18/shutterstock-105789956.jpg\n",
            "https://www.seattle.gov/images/Departments/SPU/EnvironmentConservation/HCP/HCP_River_Flows_2020.jpg\n",
            "https://www.americanrivers.org/wp-content/uploads/2022/12/B-9.png\n",
            "https://cdn.britannica.com/66/101766-050-85FEF17D/Missouri-River-Gates-of-the-Mountains-Helena.jpg\n",
            "https://static01.nyt.com/images/2023/05/22/multimedia/22cli-colorado-photo1/22cli-colorado-gwkb-mediumSquareAt3X.jpg\n",
            "https://www.energy.gov/sites/default/files/styles/full_article_width/public/2022-04/gpawg-atmospheric-rivers.png?itok=jFPhZmoK\n",
            "https://cdn.britannica.com/54/6954-050-A7871925/Central-Budapest-Danube-River-bank-Parliament-Building.jpg\n",
            "https://www.pewtrusts.org/-/media/post-launch-images/2019/07/rivers-5reasons/browns-canyon-national-monument/16x9_m.jpg\n",
            "https://easydrawingguides.com/wp-content/uploads/2017/10/how-to-draw-a-river-featured-image-1200.png\n",
            "https://www.worldatlas.com/r/w1200/upload/35/9a/4a/shutterstock-575340148.jpg\n",
            "https://natureconservancy-h.assetsadobe.com/is/image/content/dam/tnc/nature/en/photos/d/e/Delaware%20River%20(Nicholas%20A.%20Tonelli).jpg?crop=0%2C206%2C2816%2C1548&wid=4000&hei=2200&scl=0.704\n",
            "https://cdn.the-scientist.com/assets/articleNo/64424/aImg/27212/river.jpg\n",
            "https://www.telegraph.co.uk/content/dam/Travel/Cruise/danube-night-budapest.jpg\n",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/7/78/River_Shannon_from_Drumsna_bridge.jpg/1200px-River_Shannon_from_Drumsna_bridge.jpg\n",
            "https://s3-us-west-2.amazonaws.com/montana-surveytoolimages/general/full-size/636053020562619858.jpg\n",
            "https://www.americanrivers.org/wp-content/uploads/2022/12/Columbia-River-Credit-Alan-Majchrowicz-header.jpg\n",
            "https://www.snexplores.org/wp-content/uploads/2019/11/100819_JL_groundwater_feat-1028x579.jpg\n",
            "https://www.antidote.info/en/blog/reports/river-thames-mississippi-river-lake-michigan-cayuga-lake-where-and-why-word-order/aout2017-en.jpg\n",
            "https://www.worksheetsplanet.com/wp-content/uploads/2022/12/What-is-a-river.jpg\n",
            "https://images.pexels.com/photos/325807/pexels-photo-325807.jpeg?cs=srgb&dl=pexels-dom-gould-105501-325807.jpg&fm=jpg\n",
            "https://ww2.kqed.org/app/uploads/sites/35/2018/07/KlamathR_Palmer-1920x1292.jpg\n",
            "https://npca.s3.amazonaws.com/images/12315/0cdf8c83-8267-46fa-879d-dd85672d8901-banner.jpg?1540388565\n",
            "https://upload.wikimedia.org/wikipedia/commons/f/f8/Amazon_River_ESA387332.jpg\n",
            "https://t3.ftcdn.net/jpg/04/61/63/56/360_F_461635668_3LmgIDNmVCg1Enejns0WlAsKbZoK0elh.jpg\n",
            "https://wp-cpr.s3.amazonaws.com/uploads/2023/04/20221002-COLORADO-RIVER-HOOVER-DAM-BATHTUB-RING-HV-0113.jpg\n",
            "https://www.nps.gov/subjects/geology/images/Big-Bend.jpg\n",
            "https://www.floridastateparks.org/sites/default/files/styles/callout/public/media/image/blackwater%20river.jpg?itok=Bi03-mN1\n",
            "https://e360.yale.edu/assets/site/BakerRiver_Chile_Louis-Vest-Flickr_web.jpg\n",
            "https://delivery.gfobcontent.com/api/public/content/33f07818333f4d20ad9ea86aebf8a535?v=6c750e74\n",
            "https://images.nationalgeographic.org/image/upload/v1638892227/EducationHub/photos/brahmaputra-river-floods.jpg\n",
            "https://www.thoughtco.com/thmb/qKnt1TMuBAM8Pi3jEOkSppFy0Vs=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/Astor_FL_St_Johns_river_north01-5b9e7d1a46e0fb00504dabcd.jpg\n",
            "https://www.vedantu.com/seo/content-images/e3fb7564-7dec-42ac-824e-33bb8b0a437f.png\n",
            "https://cdn.pixabay.com/photo/2016/08/12/20/14/river-1589616_640.jpg\n",
            "https://www.thomascook.in/blog/wp-content/uploads/2023/08/Ganges.jpg\n",
            "https://m.media-amazon.com/images/M/MV5BYWZiNWY3YWQtNzY0Ny00ZDBiLThkMmEtN2FmYTYzN2NjNWQxXkEyXkFqcGdeQVRoaXJkUGFydHlJbmdlc3Rpb25Xb3JrZmxvdw@@._V1_.jpg\n",
            "https://wwfint.awsassets.panda.org/img/amur_river_774170.jpg\n",
            "https://cdn.mos.cms.futurecdn.net/vjEasRVMEFbfdgAEPkVpu-1200-80.jpg\n",
            "https://upload.wikimedia.org/wikipedia/commons/1/1a/Humber_River_from_the_Dundas_Street_Bridge.jpg\n",
            "https://timesofindia.indiatimes.com/photo/100822116/100822116.jpg\n",
            "https://www.americanrivers.org/wp-content/uploads/2024/04/DuckRiver_TN_Sunrise_ByronJorjorian-1024x683.jpg\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"garbage\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n24.append(i[\"original\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QkNTFIJFNDDi",
        "outputId": "0061faa0-027a-4525-f750-54147bd25ef0"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "https://upload.wikimedia.org/wikipedia/commons/f/f1/Vuilnis_bij_Essent_Milieu.jpg\n",
            "https://images.squarespace-cdn.com/content/v1/5c4e41d2b40b9d6e2ab467ff/1612855779673-B5L9FMMXBC4NWRG4N0YF/residential-trash-services.jpg\n",
            "https://rockinst.org/wp-content/uploads/2019/09/Garbage.jpg\n",
            "https://image.cnbcfm.com/api/v1/image/106889879-1622205324551-gettyimages-1232174621-bhatnagar-notitle210407_nppoa.jpeg?v=1622205973\n",
            "https://m.media-amazon.com/images/I/91GOPwexgrS.jpg\n",
            "https://static.vecteezy.com/system/resources/previews/001/994/181/non_2x/plastic-garbage-bag-isolated-icon-free-vector.jpg\n",
            "https://walrus-assets.s3.amazonaws.com/img/garbage-735x489.jpg\n",
            "https://www.rd.com/wp-content/uploads/2018/05/garbage-finds-ft.jpg\n",
            "https://smartcdn.gprod.postmedia.digital/windsorstar/wp-content/uploads/2023/09/garbage-2.jpg\n",
            "https://www.thecooldown.com/wp-content/uploads/2022/11/ffb531ab-1.jpeg?w=876&h=576\n",
            "https://www.morgancityut.org/sites/g/files/vyhlif11051/files/media/utilities/image/4471/garbage_can.png\n",
            "https://static.timesofisrael.com/www/uploads/2022/04/AP22111729374461.jpg\n",
            "https://www.japan.go.jp/kizuna/_src/7995881/burning_garbage_01.jpg?v=1712645676438\n",
            "https://lookaside.fbsbx.com/lookaside/crawler/media/?media_id=100044327384724\n",
            "https://5283141.fs1.hubspotusercontent-na1.net/hubfs/5283141/Blog/Hero%20Images/RR-Blog-Great-Pacific-Garbage-Patch.jpg\n",
            "https://www.treehugger.com/thmb/WpbOsnruVWwM9_BLPK-mmXEkzhI=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/30870156434_c44dc96de9_k-923dec9451084d4db63efd51a6713dde.jpg\n",
            "https://cff2.earth.com/uploads/2023/05/04100634/Garbage-patch-scaled.jpg\n",
            "https://img.freepik.com/premium-vector/unsorted-trash-dumpster-overflowing-garbage-bucket-pile-city-rubbish-bags-cans-litter-heap-cartoon-dirty-metal-bin-overflow-rotting-food-plastic-waste-neat-vector-illustration_81894-10336.jpg\n",
            "https://i5.walmartimages.com/asr/0ab97faf-fce9-4071-b496-8224c413944f_1.3dfcf62d6caacbd50c0f3792b917fd59.jpeg?odnHeight=768&odnWidth=768&odnBg=FFFFFF\n",
            "https://media.npr.org/assets/img/2023/11/03/nyc-trash-a----credit-austin-cope_custom-aaef9dfc3956a06d338d0012a416b044a6f31814.jpg\n",
            "https://media.licdn.com/dms/image/D5612AQErk7lpDJBzOQ/article-cover_image-shrink_600_2000/0/1675375183435?e=2147483647&v=beta&t=PE5b4LmrHebWjjdzff42Qi4Zij3nNxK5atN-B25N2ME\n",
            "https://th-thumbnailer.cdn-si-edu.com/gUD6ucwShqZjJzOYhPH51V4bAM0=/fit-in/1600x0/https%3A%2F%2Ftf-cmsv2-smithsonianmag-media.s3.amazonaws.com%2Ffiler%2F2b%2F65%2F2b65d506-89fd-49a5-90bb-4d338346e99a%2Fgarbage-bag-850874_1920.jpg\n",
            "https://www.rd.com/wp-content/uploads/2020/03/GettyImages-1147902353-1-e1584637226628-scaled.jpg\n",
            "https://upload.wikimedia.org/wikipedia/commons/3/33/Sound007RAH041022_%2836_of_69%29_%2852406233929%29.jpg\n",
            "https://as2.ftcdn.net/v2/jpg/02/39/71/45/1000_F_239714584_QZXZ7gzKQzovj23JnKQv852gUGO8DHzU.jpg\n",
            "https://lessonpix.com/drawings/3805/380x380/Garbage.png\n",
            "https://i.abcnewsfe.com/a/f9e2e8a8-1ded-4e96-802f-53549923afcf/garbage-boat-01-ht-jt-230816_1692208682348_hpMain.jpg\n",
            "https://img.etimg.com/thumb/width-1200,height-900,imgsize-164265,resizemode-75,msid-50132962/news/politics-and-nation/here-are-five-ways-to-tackle-bengalurus-garbage-problem.jpg\n",
            "https://sotp.nyc3.cdn.digitaloceanspaces.com/wp-content/uploads/2016/10/Garbagehope-637x417.jpg\n",
            "https://ca-times.brightspotcdn.com/dims4/default/126ceeb/2147483647/strip/true/crop/2048x1363+0+0/resize/1200x799!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Fe6%2F07%2Fdf9502108431c12b135d823a0d36%2Fla-tk-20160420-002\n",
            "https://response.restoration.noaa.gov/sites/default/files/images/13/marine-debris-beach-midway-credit-chris-jordan_472.jpg\n",
            "https://www.udiscovermusic.com/wp-content/uploads/2021/10/Best-Garbage-Songs-GettyImages-86137328.jpg\n",
            "https://cdn.shopify.com/s/files/1/0569/9675/7697/files/garbage_1eceb670-3594-47c3-a8d4-2f38ba77fb7c_1024x1024.jpg?v=1661194442\n",
            "https://images.thdstatic.com/productImages/26ef9730-760a-426d-8576-63dbb7a4dbef/svn/hdx-garbage-bags-hdx-960362-1d_600.jpg\n",
            "https://kids.earth.org/wp-content/uploads/2023/05/Untitled-683-%C3%97-1024px-1024-%C3%97-683px-6-900x600.jpg\n",
            "https://media.greenmatters.com/brand-img/Mrsgn-Bzh/0x0/how-much-garbage-does-average-person-produce4-1636129358850.jpg\n",
            "https://www.sierraclub.org/sites/default/files/styles/sierra_full_page_width/public/2023-06/2019-7-Recycling-ph1-WB.jpg.webp?itok=FAT4DxZR\n",
            "https://images.squarespace-cdn.com/content/v1/5c4e41d2b40b9d6e2ab467ff/1671197904751-RCECBHYCTKMHUH4EC933/my+trash.jpg\n",
            "https://www.cityofkingsville.com/wp-content/uploads/2020/12/hand-holding-garbage-black-bag-putting-trash-scaled.jpg\n",
            "https://i5.walmartimages.com/seo/55-Gallon-Trash-Bags-Heavy-Duty-Outdoor-Garbage-Bags-50-Count-for-Commercial-Lawn-and-Leaf-1-5-Mil_afb9ea42-ed98-4a9f-b04f-0593bc330387.ec40ec24c2751b14e37999989e644458.jpeg?odnHeight=768&odnWidth=768&odnBg=FFFFFF\n",
            "https://upload.wikimedia.org/wikipedia/commons/9/9c/Garbage-2005-Copenhagen-3.jpg\n",
            "https://t3.ftcdn.net/jpg/00/52/48/66/360_F_52486643_JZL97JZ9tKzTGWO7RU3wf2ZvOZ9LjcPs.jpg\n",
            "https://www.parklandcounty.com/en/home-property-and-utilities/resources/Images/GarbageRecycling-Banner.png\n",
            "https://image.cnbcfm.com/api/v1/image/106899579-1624029575584-trash.jpg?v=1624029600&w=750&h=422&vtcrop=y\n",
            "https://assets-global.website-files.com/64b7636f12949eb74511aeb3/655cb630f88e9c03dcaa6382_Waste%20Connections%20employee%20and%20customer%20shaking%20hands%20(1).jpg\n",
            "https://tapinto-production.s3.amazonaws.com/uploads/photos/a5/best_crop_46f91019422aeb3472e2_mini_magick20230427-6942-8kqz6h.jpg?id=4785600\n",
            "https://urbanimpact.com/themes/custom/urbanimpact/assets/images/service_garbage/basic.jpg\n",
            "https://nationaltoday.com/wp-content/uploads/2021/06/Garbage-Man-1200x834.jpg\n",
            "https://miro.medium.com/v2/resize:fit:803/1*kylOt2przGxahWebTuENbg.png\n",
            "https://m.media-amazon.com/images/I/812YEh9a5IL.jpg\n",
            "https://www.inspectnest.com/static/assets/images/landing_page/waste/garbage-pile.jpg\n",
            "https://i.unu.edu/media/ourworld.unu.edu-en/article/5776/waste.jpg\n",
            "https://www.safetyandhealthmagazine.com/ext/resources/images/2018/06-june/sanitation.jpg?height=635&t=1526935015&width=1200\n",
            "https://www.planetnatural.com/wp-content/uploads/2014/03/landfill.jpg\n",
            "https://static01.nyt.com/images/2024/02/01/multimedia/01ny-garbage-truck-ptjf/01ny-garbage-truck-ptjf-mediumSquareAt3X.jpg\n",
            "https://global.unitednations.entermediadb.net/assets/mediadb/services/module/asset/downloads/preset/Collections/Embargoed/29-03-2023-UNEP-ZWD-waste-management-01.jpg/image1170x530cropped.jpg\n",
            "https://www.roadrunnerwm.com/hubfs/Blog/Hero%20Images/RR-Blog-10062023-B.jpg#keepProtocol\n",
            "https://cloudfront-us-east-1.images.arcpublishing.com/opb/ZJM7NGQIDZA7NOFO5XIOIIYYTA.jpg\n",
            "https://sweitzerwaste.com/wp-content/uploads/2022/08/the-blowup-t06aN6vewaQ-unsplash-scaled.jpg\n",
            "https://img.freepik.com/free-vector/trash-bags-dustbin-vector-illustrations-set-collection-black-sacks-with-food-waste-open-dirty-garbage-cans-dumpsters-with-rubbish-junk-white-background-ecology-pollution-concept_74855-23233.jpg\n",
            "https://images.csmonitor.com/csm/2023/01/0118%20GARBAGECITY%20trucks.jpg?alias=standard_900x600\n",
            "https://www.rd.com/wp-content/uploads/2017/09/2-Things-Garbage-Collectors-Want-You-to-Know_146632817-Dmitry-Kalinovsky.jpg\n",
            "https://www.chandleraz.gov/sites/default/files/styles/social_share/public/inline-images/PW-garbage-truck.jpg?itok=JR1KUb0t\n",
            "https://environmentaldefence.ca/wp-content/uploads/2024/02/Plastic_Stock-Photo_Garbage-Bin.png\n",
            "https://www.usatoday.com/gcdn/-mm-/31f9ac06033cd56f8ef8efa4b4c58b9c680bd2e9/c=5-0-3901-2929/local/-/media/2018/04/18/USATODAY/USATODAY/636596580624460648-EPA-AT-SEA-POLLUTION-GREAT-PACIFIC-GARBAGE-PATCH-98640126.JPG\n",
            "https://img.etimg.com/thumb/width-1600,height-900,imgsize-139162,resizemode-75,msid-19836955/news/politics-and-nation/cities-facing-garbage-disposal-problem-government.jpg\n",
            "https://static.vecteezy.com/system/resources/thumbnails/032/700/052/small/ai-generative-pile-of-garbage-png.png\n",
            "https://globalhealthnow.org/sites/default/files/styles/max_650x650/public/images/2016-09/garbage%20trucks.jpg?itok=WU96CpGt\n",
            "https://www.learner.org/wp-content/uploads/2019/10/essential-lens-garbage-overflowing-garbage-bin-fig4043.jpg\n",
            "https://froghauling.com/storage/app/media/garbage-truck.jpg\n",
            "https://www.slc.gov/sustainability/wp-content/uploads/sites/20/2023/06/Curbside-Garbage-Spread-2023-01-565x1024.jpg\n",
            "https://news.wttw.com/sites/default/files/field/image/GarbagePKG_0626.jpg\n",
            "https://th-thumbnailer.cdn-si-edu.com/q4eE6lYo7X1Mn3LcFiSJ9_BpicU=/1000x750/filters:no_upscale():focal(2300x1511:2301x1512)/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer_public/11/cf/11cf2e44-c25b-4bdf-a3ae-39c363430d14/gettyimages-661871012.jpg\n",
            "https://starofmysore.com/wp-content/uploads/2022/08/news-6-garbage-dump-Doctors-Corner.jpg\n",
            "https://2ea.co.uk/wp-content/uploads/Media/emerging-economies-adding-to-the-garbage-pile.jpg\n",
            "https://thumbs.dreamstime.com/z/garbage-collector-theme-image-eps-vector-illustration-62540873.jpg\n",
            "https://frontierwaste.com/wp-content/uploads/2021/08/frontier-truck-with-sunset.jpg\n",
            "https://www.sa.gov/files/assets/main/v/2/swmd/images/cart-sizes-brown-01.jpg?dimension=pageimage&w=480\n",
            "https://img.freepik.com/premium-vector/garbage-waste-closeup-dustbin-dirty-garbage-container-cartoon-full-rubbish-bin-isolated-organic-plastic-metal-can-bottles-exact-vector-scene_543062-5357.jpg\n",
            "https://www.geneva.il.us/ImageRepository/Document?documentId=13000\n",
            "https://assets-global.website-files.com/656f8044b2590c3873067440/656f8044b2590c3873067b3a_Residential%20Garbage%20Collection.jpg\n",
            "https://tmm.chicagodistributioncenter.com/IsbnImages/9781861892225.jpg\n",
            "https://globalnews.ca/wp-content/uploads/2023/04/GettyImages-1231226326.jpg?quality=85&strip=all&w=1200\n",
            "https://cdn.theatlantic.com/thumbor/rUmbC2HJjxsvBxKeLuuGcbkeQ2k=/126x0:1794x938/1440x810/media/img/2014/06/20/opener_01/original.jpg\n",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/b/bb/Garbage-2005-Copenhagen-2.jpg/1200px-Garbage-2005-Copenhagen-2.jpg\n",
            "https://www.grangerwasteservices.com/wp-content/uploads/2017/08/Granger-Waste-Management-Employee-Photos-98-scaled.jpg\n",
            "https://i5.walmartimages.com/seo/Toter-64-gallon-black-garbage-can-with-wheels-and-lid_11b6c477-0ca4-471e-8eb6-ed870988863d.edd768f18d6e22d4857b0cc0a52788b8.jpeg\n",
            "https://assets-global.website-files.com/65029f54d4da919f985e9915/65494ab43fd342a100aabd8f_WasteConnections_El%20Campo.webp\n",
            "https://www.shutterstock.com/shutterstock/photos/1265319334/display_1500/stock-photo-hand-holding-garbage-black-bag-putting-in-to-trash-1265319334.jpg\n",
            "https://m.media-amazon.com/images/I/71NKGkuI5qL.jpg\n",
            "https://sanjoserecycles.org/wp-content/uploads/sites/8/2021/07/full-garbage-copy.jpg\n",
            "https://arrowaste.com/wp-content/uploads/2021/05/UnclaimedIV.jpg\n",
            "https://www.martin.fl.us/sites/default/files/styles/departmental_hero_1920x768/public/2022-08/Garbage%2C%20Recycling%20and%20Yard%20Waste%20Hero.jpeg.webp?itok=6c4KB98g\n",
            "https://images.thdstatic.com/productImages/cb7266a3-04eb-496c-8309-b51bb6302c14/svn/toter-outdoor-trash-cans-79264-r2200-76_600.jpg\n",
            "https://ca-times.brightspotcdn.com/dims4/default/5751801/2147483647/strip/false/crop/4032x3024+0+0/resize/1486x1115!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F1f%2Fa9%2F3ea5bc9c4a749b5f7b9abd8c0d7f%2Fcity-sanitation-truck.jpeg\n",
            "https://media.istockphoto.com/id/1185895830/vector/metal-trash-can-garbage-cans-with-open-and-closed-cover-isolated-on-white.jpg?s=612x612&w=0&k=20&c=4LSlibhzwAGxoakzBP--6nO3FNdfr3a608vo_Mc5BzU=\n",
            "https://i0.wp.com/www.ecomena.org/wp-content/uploads/2012/10/Optimized-Cairo_Waste.jpg\n",
            "https://3seaseurope.com/wp-content/uploads/2022/12/ocean.webp\n",
            "https://images.newscientist.com/wp-content/uploads/2023/04/17102646/SEI_152276822.jpg?width=1200\n",
            "https://i.abcnewsfe.com/a/81bdccd1-f699-4d8d-a208-f3a665bcb7ad/garbage-boat-ht-jt-230816_1692208862362_hpEmbed_3x2.jpg\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"flower\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n23.append(i[\"original\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "7zKbXCaaM9Xb",
        "outputId": "2c899b8e-505d-44ff-f7f4-f7d5b2bc6f43"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "'images_results'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-31-96a1ff05811a>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0msearch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGoogleSearch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msearch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"images_results\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"original\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'images_results'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"book\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n22.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "kn6nvUrKMsJs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"glasses\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n21.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "fWcD64JDMlhO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"soccer field\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n20.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "jF_BesLDMhwo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"slide\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n19.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "A5NQPkvnMehO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"swing\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n18.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "jjpYoqfGMZx5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"phone\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n17.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "-t6UrKA3MVi1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"jersey\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n16.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "LDlpCcBzMPC6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"hat\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n15.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "n2Ez23zIMLf8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"scooter\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n14.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "0Q_78TrhMGwr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"bike\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n13.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "_VH8XaLkL-rU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"umbrella\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n12.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "bVT5U75KLIpL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"lawn\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n11.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "_1pijwgNLCkC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"field\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n10.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "Xak5jzkpK9IU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"grass\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n9.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "seYFpGrJK1so"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"fire hydrant\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n8.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "x-YZj-P7KrIt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"frisbee\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    n7.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "mUH_MXDyKhEr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"flock of geese\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    g6.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "1Yx9dU_uKGzF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"sleeping geese\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "   g5.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "yWgzIqDLKAgv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"canadian geese\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    g4.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "KPXHUym4JuVk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"geese on field\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    g3.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "QPLRJF71Jjun"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"geese\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    g2.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "9PdAfAZ7JToP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"walking geese\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    g1.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "l1prwzUF_0xC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"dogs\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    dogs.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "lzBndZ-qAzm5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"dog\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    dog.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "AcJVxgr6Av9C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"people\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    people.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "l1wWJfnLAiP3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"ball\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    ball.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "b9_wQydXAVxK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"children\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    child.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "SeANhulVANMs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"mouse\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    person.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "KBeu2I_LAG4U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"park bench\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    bench.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "ZU9fAuNw_1jY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"Geese in park\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    pgeese.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "1CDNoZe9bPkC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"swimming goose\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    sgeese.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "bypVzQGObEja"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"flying goose\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    fgeese.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "MYYFiX12apS_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"Goose\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    img.append(i[\"original\"])"
      ],
      "metadata": {
        "id": "YOW0HUUO4DiA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"Random Clipart\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "print(len(results[\"images_results\"]))\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    random.append(i[\"original\"])\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "uJnU-dIm6-AB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "  \"engine\": \"google_images\",\n",
        "  \"google_domain\": \"google.com\",\n",
        "  \"q\": \"tree\",\n",
        "  \"hl\": \"en\",\n",
        "  \"gl\": \"us\",\n",
        "  \"api_key\": \"b3a6f088620c0b29e535e365e2aa4b2d374ce510f90394089879f86a1296b387\"\n",
        "}\n",
        "\n",
        "search = GoogleSearch(params)\n",
        "results = search.get_dict()\n",
        "for i in results[\"images_results\"][:100]:\n",
        "  print(i[\"original\"])\n",
        "  if (i[\"original\"][-3:] == \"jpg\"):\n",
        "    tree.append(i[\"original\"])\n",
        "\n"
      ],
      "metadata": {
        "id": "vBlumqjslBCP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#TODO Copy and paste above cell, change number of images, searches, do mostly nature, but also random garbage"
      ],
      "metadata": {
        "id": "2vaog0Jvjn5T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install tensorflow pillow requests\n",
        "!pip install urllib3\n",
        "import urllib3\n",
        "urllib3.disable_warnings()\n",
        "\n",
        "urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)"
      ],
      "metadata": {
        "id": "-nPH5Z7R6c4X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "from PIL import Image\n",
        "from io import BytesIO\n",
        "import numpy as np\n",
        "import tensorflow as tf\n"
      ],
      "metadata": {
        "id": "Ig5p7b1Y6d8A"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "source": [
        "!pip install requests"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "HvJJKhFZ6Gtj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bench_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    bench_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "g1_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    g1_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "g2_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    g2_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "g3_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    g3_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "g4_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    g4_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "g5_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    g5_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "g6_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    g6_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "n7_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n7_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "n8_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n8_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "n9_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n9_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "n10_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n10_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "n11_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n11_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "n12_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n12_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "n13_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n13_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "n14_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n14_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "n15_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n15_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "n16_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n16_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "n17_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n17_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "n18_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n18_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "n19_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n19_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "n20_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n20_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "n21_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n21_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "n22_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n22_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "n23_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n23_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "n24_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n24_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "n25_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n25_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "n26_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n26_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "n27_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n27_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "n28_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n28_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "n29_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    n29_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "# n30_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n30_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "# n31_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n31_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n32_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n32_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "\n",
        "# n33_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n33_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n34_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n34_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n35_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n35_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n36_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n36_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n37_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n37_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n38_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n38_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n39_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n39_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n40_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n40_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n41_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n41_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n42_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n42_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n43_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n43_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n44_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n44_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n45_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n45_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n46_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n46_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n47_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n47_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n48_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n48_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# n49_images = []\n",
        "# for url in img:\n",
        "\n",
        "#   try:\n",
        "#     response = requests.get(url)\n",
        "#     image = Image.open(BytesIO(response.content))\n",
        "#     # Convert to RGB if grayscale\n",
        "#     if image.mode != 'RGB':\n",
        "#         image = image.convert('RGB')\n",
        "#     image = image.resize((224, 224))\n",
        "#     img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "#     n49_images.append(img_array)\n",
        "#   # Proceed with processing the image\n",
        "#   except IOError:\n",
        "#       print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "dogs_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    dogs_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "dog_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    dog_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "people_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    people_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "ball_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    ball_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "child_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    child_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "person_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    person_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "goose_images = []\n",
        "for url in img:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    goose_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "not_goose_images = []\n",
        "for url in random:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    not_goose_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "#TODO copy and paste above with new data\n",
        "\n",
        "tree_images = []\n",
        "for url in tree:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    tree_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "fgeese_images = []\n",
        "for url in fgeese:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    fgeese_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "sgeese_images = []\n",
        "for url in sgeese:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    sgeese_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "pgeese_images = []\n",
        "for url in pgeese:\n",
        "\n",
        "  try:\n",
        "    response = requests.get(url)\n",
        "    image = Image.open(BytesIO(response.content))\n",
        "    # Convert to RGB if grayscale\n",
        "    if image.mode != 'RGB':\n",
        "        image = image.convert('RGB')\n",
        "    image = image.resize((224, 224))\n",
        "    img_array = np.array(image) / 255.0  # Scale pixel values\n",
        "    pgeese_images.append(img_array)\n",
        "  # Proceed with processing the image\n",
        "  except IOError:\n",
        "      print(f\"Cannot identify image file. The file may be corrupted or in an unsupported format: {url}\")\n",
        "\n",
        "# Combine into a single dataset\n",
        "X = np.concatenate((goose_images, not_goose_images, tree_images, fgeese_images, sgeese_images, pgeese_images, bench_images, person_images, child_images, ball_images, people_images, dog_images, dogs_images, g1_images, g2_images, g3_images, g4_images, g5_images, g6_images, n7_images, n8_images, n9_images, n10_images, n11_images, n12_images, n13_images, n14_images, n15_images, n16_images, n17_images, n18_images, n19_images, n20_images, n21_images, n22_images, n23_images, n24_images, n25_images, n26_images, n27_images, n28_images, n29_images ), axis=0)\n",
        "\n",
        "# Create labels (1 for goose, 0 for not goose)\n",
        "y = np.array([1] * len(goose_images) + [0] * len(not_goose_images) + [0] * len(tree_images) + [1] * len(fgeese_images) + [1] * len(sgeese_images) + [1] * len(pgeese_images) + [0] * len(bench_images) + [0] * len(person_images) + [0] * len(child_images) + [0] * len(ball_images) + [0] * len(people_images) + [0] * len(dog_images) + [0] * len(dogs_images) + [1] * len(g1_images) + [1] * len(g2_images) + [1] * len(g3_images) + [1] * len(g4_images) + [1] * len(g5_images) + [1] * len(g6_images) + [0] * len(n7_images) + [0] * len(n8_images) + [0] * len(n9_images) + [0] * len(n10_images) + [0] * len(n11_images) + [0] * len(n12_images) + [0] * len(n13_images) + [0] * len(n14_images) + [0] * len(n15_images) + [0] * len(n16_images) + [0] * len(n17_images) + [0] * len(n18_images) + [0] * len(n19_images) + [0] * len(n20_images) + [0] * len(n21_images) + [0] * len(n22_images) + [0] * len(n23_images) + [0] * len(n24_images) + [0] * len(n25_images) + [0] * len(n26_images) + [0] * len(n27_images) + [0] * len(n28_images) + [0] * len(n29_images))\n"
      ],
      "metadata": {
        "id": "lMIw08m16jYg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.applications import MobileNetV2\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "# Load MobileNetV2 from TensorFlow, excluding the top layer\n",
        "base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n",
        "\n",
        "# Freeze the layers of the base model to prevent them from being updated during the first phase of training\n",
        "for layer in base_model.layers:\n",
        "    layer.trainable = False\n",
        "\n",
        "# Add custom layers on top of the base model\n",
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)  # Add a global spatial average pooling layer\n",
        "x = Dense(1024, activation='relu')(x)  # Add a fully connected layer with 1024 units and ReLU activation\n",
        "predictions = Dense(1, activation='sigmoid')(x)  # Add a logistic layer for binary classification\n",
        "\n",
        "# This is the model we will train\n",
        "model = Model(inputs=base_model.input, outputs=predictions)\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer=Adam(learning_rate=0.0001),\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n"
      ],
      "metadata": {
        "id": "ockiBj0D6sym"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_val, X_test, Y_test = train_test_split(X, y, test_size=0.1, random_state=42)\n",
        "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Make sure to adjust the model.fit call to use the arrays directly\n",
        "history = model.fit(X_train, y_train, epochs=10, validation_data=(X_val, y_val))\n"
      ],
      "metadata": {
        "id": "-NipwF3x6wkR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pd.DataFrame(history.history).plot(figsize = (16, 10))\n",
        "plt.grid(True)\n",
        "plt.gca().set_ylim(0, 1)\n",
        "plt.show()\n",
        "model.evalute(X_test, y_test)"
      ],
      "metadata": {
        "id": "rIMShobfRu7J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Add a batch dimension\n",
        "test_image = X_test[0]\n",
        "test_image_batch = np.expand_dims(test_image, axis=0)\n",
        "\n",
        "# Make a prediction\n",
        "predictions = model.predict(test_image_batch)\n",
        "\n",
        "# Assuming a binary classification model with a sigmoid activation function\n",
        "predicted_class = predictions[0][0]  # Get the prediction score for the first image in the batch\n",
        "if predicted_class > 0.5:\n",
        "    print(\"The image is a goose.\")\n",
        "else:\n",
        "    print(\"The image is not a goose.\")\n",
        "\n"
      ],
      "metadata": {
        "id": "EzSrTesxnke8"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}